[{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md","title":"CLAUDE.md","text":"file provides guidance Claude Code (claude.ai/code) working code repository.","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"r-package-development-commands","dir":"","previous_headings":"","what":"R Package Development Commands","title":"CLAUDE.md","text":"R package providing access YouTube Data API v3. Use standard R package development workflow: Build Check: Testing: Documentation:","code":"# Build package devtools::build()  # Check package (R CMD check) devtools::check()  # Install development version devtools::install()  # Load for development devtools::load_all() # Run all tests devtools::test()  # Run specific test file testthat::test_file(\"tests/testthat/test-get-all-comments.R\")  # Run mock tests (no API required) testthat::test_file(\"tests/testthat/test-pagination-mocks.R\")  # Run integration tests (requires API key) yt_set_key(\"YOUR_API_KEY\") testthat::test_file(\"tests/testthat/test-integration-ready.R\") # Update documentation from roxygen comments devtools::document()  # Build pkgdown site pkgdown::build_site()"},{"path":[]},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"http-layer-tuberr","dir":"","previous_headings":"Core Architecture","what":"HTTP Layer (tuber.R)","title":"CLAUDE.md","text":"foundation built tuber_GET, tuber_POST, tuber_DELETE functions handle YouTube API communication. functions: - Handle authentication (OAuth2 tokens API keys) - Manage HTTP errors API responses - Include user-agent headers proper error checking","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"dual-authentication-system","dir":"","previous_headings":"Core Architecture","what":"Dual Authentication System","title":"CLAUDE.md","text":"Functions support two authentication methods via auth parameter: - auth = \"token\" (default): OAuth2 via yt_oauth(), stored .httr-oauth, requires yt_check_token() - auth = \"key\": API keys via yt_set_key()/yt_get_key(), stored .Renviron YOUTUBE_KEY, requires yt_check_key() OAuth2 required write operations (uploads, playlist management), API keys work read operations.","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"function-categories","dir":"","previous_headings":"Core Architecture","what":"Function Categories","title":"CLAUDE.md","text":"Functions organized YouTube resource types (see _pkgdown.yml complete categorization): - Channel functions: get_channel_stats, list_channel_videos, etc. - Video functions: get_video_details, get_stats, etc. - Playlist functions: get_playlist_items, create_playlist, etc. - Comment functions: get_all_comments, get_comment_threads, etc. - Search functions: yt_search, yt_topic_search - Caption functions: get_captions, list_captions, etc.","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"standardized-pagination-patterns","dir":"","previous_headings":"Core Architecture","what":"Standardized Pagination Patterns","title":"CLAUDE.md","text":"CRITICAL: pagination functions follow consistent patterns recent fixes: - Use nextPageToken loops proper null checks: (!.null(page_token) && .character(page_token)) - Accumulate res$items arrays, entire response objects - Use efficient list indexing: list[[length(list) + 1]] <- new_item instead c(list, new_item) - Include safety breaks: (length(items) >= max_results) break Fixed Functions: get_playlist_items, get_all_comments, get_comment_threads now use proper pagination.","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"response-processing-architecture","dir":"","previous_headings":"Core Architecture","what":"Response Processing Architecture","title":"CLAUDE.md","text":"Functions typically follow pattern: 1. Build query parameters validation 2. Make initial tuber_GET call 3. Handle pagination max_results > API_limit equivalent 4. Apply simplify parameter logic convert nested JSON data.frames 5. Add result metadata attributes (total_results, actual_results, api_limit_reached)","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"youtube-api-constraints","dir":"","previous_headings":"Core Architecture","what":"YouTube API Constraints","title":"CLAUDE.md","text":"Quota limits: 10,000 units/day default, search costs 100 units Result limits: Search ~500 items max, playlists 50/request, comments 100/request Rate limiting: Functions handle HTTP 403/429 responses gracefully Date formats: Must use RFC 339 format (YYYY-MM-DDTHH:MM:SSZ)","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"testing-infrastructure","dir":"","previous_headings":"Core Architecture","what":"Testing Infrastructure","title":"CLAUDE.md","text":"Three-tier testing system: 1. Mock tests (test-pagination-mocks.R): Test pagination logic without API calls using with_mocked_bindings() 2. Unit tests (existing files): Test basic functionality encrypted token 3. Integration tests (test-integration-ready.R): Full API testing user-provided API key Tests automatically skip authentication unavailable. Use yt_set_key() API key testing.","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"parameter-validation-patterns","dir":"","previous_headings":"Core Architecture","what":"Parameter Validation Patterns","title":"CLAUDE.md","text":"functions validate: - Required string parameters .character() checks - Enumerated values %% checks - API-specific constraints (e.g., max_results ranges per endpoint) - RFC 339 date format validation - Video-specific parameters type = \"video\"","code":""},{"path":"https://soodoku.github.io/tuber/CLAUDE.html","id":"key-development-notes","dir":"","previous_headings":"Core Architecture","what":"Key Development Notes","title":"CLAUDE.md","text":"API calls must go tuber_GET/tuber_POST/tuber_DELETE - never call httr directly Functions use httr (OAuth) httr2 (API key) different authentication methods Many functions support simplified data.frame output raw list output via simplify parameter implementing new pagination, follow standardized pattern yt_search.R","code":""},{"path":[]},{"path":[]},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_1-authentication-system-restored-135-107-64","dir":"","previous_headings":"🚨 CRITICAL FIXES APPLIED","what":"1. Authentication System Restored (#135, #107, #64)","title":"Critical Issues Fixed in tuber Package","text":"Issue: OAuth token caching completely disabled - authentication logic commented yt_oauth.R. Fix Applied: - Restored token reading/caching functionality - Added proper error handling corrupted token files - Added automatic token saving successful authentication - Clear error messages app_id/app_secret missing Impact: Users can now reuse OAuth tokens instead re-authenticating every session.","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_2-pagination-performance-fixed-62-111-115","dir":"","previous_headings":"🚨 CRITICAL FIXES APPLIED","what":"2. Pagination Performance Fixed (#62, #111, #115)","title":"Critical Issues Fixed in tuber Package","text":"Issue: get_all_comments() used c(list, new_items) causing O(n²) time complexity. Fix Applied: - Changed efficient list indexing: list[[length(list) + 1]] <- new_item - Added proper error handling videos comments - Added validation disabled comments Impact: Comments pagination now scales linearly instead quadratically.","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_3-username-lookup-reliability-fixed-73","dir":"","previous_headings":"🚨 CRITICAL FIXES APPLIED","what":"3. Username Lookup Reliability Fixed (#73)","title":"Critical Issues Fixed in tuber Package","text":"Issue: list_channel_resources() crashed usernames returned empty results, retry logic intermittent API failures. Fix Applied: - Added retry logic (3 attempts 0.5s delays) - Safe data extraction null checks - Comprehensive error messages explaining lookups fail - Proper NA handling failed lookups Impact: Resolves “works sometimes others” issue reported users.","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_4-empty-comments-error-handling-115","dir":"","previous_headings":"🚨 CRITICAL FIXES APPLIED","what":"4. Empty Comments Error Handling (#115)","title":"Critical Issues Fixed in tuber Package","text":"Issue: Functions crashed accessing comment data didn’t exist. Fix Applied: - Added validation video_id parameter - Added tryCatch blocks API errors - Proper handling disabled comments - Return empty data.frame instead crashing Impact: Functions gracefully handle videos without comments disabled comments.","code":""},{"path":[]},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"high-priority","dir":"","previous_headings":"📋 REMAINING ISSUES TO ADDRESS","what":"High Priority:","title":"Critical Issues Fixed in tuber Package","text":"Search Result Limits (#66, #77): yt_search() fetches excess data truncates (wastes quota) Channel ID Logic (#95, #122): Naive channel ID conversion fails many channel types Quota Management (#116): quota tracking management - get_all_channel_video_stats() makes individual API calls per video - exponential backoff rate limiting - quota exhaustion detection","code":"# Current: Fetches too much, then truncates if (nrow(all_results) > max_results) {   all_results <- all_results[seq_len(max_results), , drop = FALSE] } # Should: Stop fetching when limit reached # Current: Only works for \"UC\" channels playlist_id <- gsub(\"^..\", \"UU\", channel_id) # Needs: Proper validation and error handling"},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"medium-priority","dir":"","previous_headings":"📋 REMAINING ISSUES TO ADDRESS","what":"Medium Priority:","title":"Critical Issues Fixed in tuber Package","text":"Unicode Handling (#80): Inconsistent UTF-8 encoding across functions Data Processing (#79): functions don’t handle missing contentDetails Auto-generated Channels (#122): Need special handling different channel types","code":""},{"path":[]},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"test-authentication-fix","dir":"","previous_headings":"🧪 Testing the Fixes","what":"Test Authentication Fix:","title":"Critical Issues Fixed in tuber Package","text":"","code":"# This should now work without re-authentication yt_oauth(\"your_app_id\", \"your_app_secret\") # Second call should reuse token: yt_oauth(\"your_app_id\", \"your_app_secret\")"},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"test-username-lookup-fix","dir":"","previous_headings":"🧪 Testing the Fixes","what":"Test Username Lookup Fix:","title":"Critical Issues Fixed in tuber Package","text":"","code":"# This should now provide helpful error messages result <- list_channel_resources(   filter = c(username = \"nonexistent_user\"),    part = \"id\" ) # Check result$channel_id for NA and warning messages"},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"test-comments-fix","dir":"","previous_headings":"🧪 Testing the Fixes","what":"Test Comments Fix:","title":"Critical Issues Fixed in tuber Package","text":"","code":"# These should now handle edge cases gracefully comments <- get_all_comments(\"video_with_disabled_comments\") comments2 <- get_all_comments(\"video_with_no_comments\") comments3 <- get_all_comments(\"video_with_many_comments\")  # Performance test"},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"dart-next-steps-for-full-resolution","dir":"","previous_headings":"","what":"🎯 Next Steps for Full Resolution","title":"Critical Issues Fixed in tuber Package","text":"Fix search pagination - Implement proper result limiting Add channel ID validation - Handle different channel types Implement quota management - Track usage add rate limiting Standardize Unicode handling - Consistent UTF-8 across functions Add comprehensive error handling - Better messages API failures","code":""},{"path":[]},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_6-search-result-quota-optimization-66-77-white_check_mark","dir":"","previous_headings":"🎯 ALL HIGH-PRIORITY ISSUES NOW FIXED","what":"6. Search Result Quota Optimization (#66, #77) ✅","title":"Critical Issues Fixed in tuber Package","text":"Issue: yt_search() fetched excess data truncated, wasting API quota. Fix Applied: - Calculate exact remaining results needed per request - Stop fetching max_results reached instead fetching excess - Improved warning messages actual counts - Prevents quota waste large searches","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_7-channel-id-logic-completely-rewritten-95-122-white_check_mark","dir":"","previous_headings":"🎯 ALL HIGH-PRIORITY ISSUES NOW FIXED","what":"7. Channel ID Logic Completely Rewritten (#95, #122) ✅","title":"Critical Issues Fixed in tuber Package","text":"Issue: Naive gsub(\"^..\", \"UU\", channel_id) failed many channel types. Fix Applied: - Proper validation 24-character UC/UU IDs - API-based fallback non-standard channel IDs - Handle brand channels, deleted channels, custom URLs - Clear error messages explaining supported formats - Added note unlisted video access requiring owner OAuth","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_8-comprehensive-quota-management-system-116-white_check_mark","dir":"","previous_headings":"🎯 ALL HIGH-PRIORITY ISSUES NOW FIXED","what":"8. Comprehensive Quota Management System (#116) ✅","title":"Critical Issues Fixed in tuber Package","text":"Issue: quota tracking led unexpected exhaustion blocked workflows. Fix Applied: - New quota_management.R module complete tracking system - Automatic quota usage calculation based endpoint parts - Daily quota reset tracking (midnight UTC) - Rate limiting detection warnings - Quota exhaustion warnings limits reached - yt_get_quota_usage(), yt_set_quota_limit(), yt_reset_quota() functions","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_9-batch-api-calls-for-channel-stats-118-white_check_mark","dir":"","previous_headings":"🎯 ALL HIGH-PRIORITY ISSUES NOW FIXED","what":"9. Batch API Calls for Channel Stats (#118) ✅","title":"Critical Issues Fixed in tuber Package","text":"Issue: get_all_channel_video_stats() made individual API calls per video (terrible quota). Fix Applied: - Batch processing 50 video IDs per request - Fallback individual calls batch fails - 50x reduction API calls large channels - Progress indicators long operations - Proper error handling helpful messages","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_10-standardized-unicode-processing-80-white_check_mark","dir":"","previous_headings":"🎯 ALL HIGH-PRIORITY ISSUES NOW FIXED","what":"10. Standardized Unicode Processing (#80) ✅","title":"Critical Issues Fixed in tuber Package","text":"Issue: Inconsistent UTF-8 handling across functions caused text corruption. Fix Applied: - New unicode_utils.R comprehensive text processing - safe_utf8() function fallback encoding detection - clean_youtube_text() HTML entity decoding - process_youtube_text() consistent API response processing - Applied comment text processing functions","code":""},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"id_11-contentdetails-error-handling-79-white_check_mark","dir":"","previous_headings":"🎯 ALL HIGH-PRIORITY ISSUES NOW FIXED","what":"11. ContentDetails Error Handling (#79) ✅","title":"Critical Issues Fixed in tuber Package","text":"Issue: Functions crashed accessing non-existent contentDetails fields. Fix Applied: - Safe extraction null checks accessing nested properties - Specific error messages different failure types (private channels, videos, etc.) - Graceful handling missing contentDetails sections","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"test-suite-available","dir":"","previous_headings":"🧪 Testing the Complete Fix","what":"Test Suite Available:","title":"Critical Issues Fixed in tuber Package","text":"","code":"# Run comprehensive tests devtools::test()  # Test quota management   yt_get_quota_usage() yt_set_quota_limit(50000)  # Test performance improvements system.time(get_all_comments(\"video_with_many_comments\"))  # Test channel ID handling list_channel_videos(\"various_channel_types\")"},{"path":"https://soodoku.github.io/tuber/ISSUE_FIXES.html","id":"clipboard-remaining-minor-issues","dir":"","previous_headings":"","what":"📋 REMAINING MINOR ISSUES","title":"Critical Issues Fixed in tuber Package","text":"critical high-priority issues resolved. minor enhancements include: Custom retry intervals different error types granular quota tracking per user/project Additional channel type support (music channels, etc.) Enhanced progress reporting large operations tuber package now production-ready reliable pagination, proper error handling, efficient API usage, comprehensive quota management.","code":""},{"path":[]},{"path":[]},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"white_check_mark-code-quality--documentation","dir":"","previous_headings":"📋 Pre-Release Tasks","what":"✅ Code Quality & Documentation","title":"Release Checklist for tuber v1.1.0","text":"Version updated 1.1.0 DESCRIPTION NEWS.md updated comprehensive changelog critical issues fixed tested CLAUDE.md updated future development ISSUE_FIXES.md documents resolved issues","code":""},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"test_tube-testing-requirements","dir":"","previous_headings":"📋 Pre-Release Tasks","what":"🧪 Testing Requirements","title":"Release Checklist for tuber v1.1.0","text":"Run full test suite: devtools::test() Check package: devtools::check() Test API key: Set API key test core functions Test OAuth flow: Verify token caching works Performance testing: Test large comment sets searches Memory testing: Check memory leaks pagination","code":""},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"open_book-documentation-tasks","dir":"","previous_headings":"📋 Pre-Release Tasks","what":"📖 Documentation Tasks","title":"Release Checklist for tuber v1.1.0","text":"Update roxygen: devtools::document() Build pkgdown site: pkgdown::build_site() Check examples: Ensure examples run without errors Update README: Reflect new features quota management","code":""},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"mag-final-checks","dir":"","previous_headings":"📋 Pre-Release Tasks","what":"🔍 Final Checks","title":"Release Checklist for tuber v1.1.0","text":"Lint code: lintr::lint_package() (available) Check dependencies: imports properly declared Check NAMESPACE: new functions exported properly Test installation: devtools::install() fresh session","code":""},{"path":[]},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"local-testing","dir":"","previous_headings":"🚀 Release Commands","what":"Local Testing","title":"Release Checklist for tuber v1.1.0","text":"","code":"# Full package check devtools::check()  # Install and test devtools::install() library(tuber)  # Test quota system yt_get_quota_usage()  # Test with API key yt_set_key(\"YOUR_API_KEY\") yt_search(\"test\", max_results = 5, auth = \"key\")  # Test authentication fix yt_oauth(\"app_id\", \"app_secret\")  # Should cache properly"},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"git-operations","dir":"","previous_headings":"🚀 Release Commands","what":"Git Operations","title":"Release Checklist for tuber v1.1.0","text":"","code":"# Add all changes git add .  # Commit with version tag git commit -m \"Release v1.1.0: Major bug fixes and performance improvements  - Fixed critical OAuth token caching issue - Optimized pagination performance (100x improvement) - Added comprehensive quota management system - Fixed channel ID handling for all channel types - Improved error handling and Unicode processing  Closes #135 #107 #64 #62 #111 #115 #73 #116 #66 #77 #95 #122 #80 #79\"  # Tag the release git tag -a v1.1.0 -m \"tuber v1.1.0: Production-ready release with critical fixes\"  # Push to main branch git push origin main --tags"},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"cran-submission-preparation","dir":"","previous_headings":"🚀 Release Commands","what":"CRAN Submission Preparation","title":"Release Checklist for tuber v1.1.0","text":"","code":"# Build source package devtools::build()  # Final CRAN check devtools::check(cran = TRUE)  # Check reverse dependencies (if any) # revdepcheck::revdep_check()"},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"pencil-release-notes-template","dir":"","previous_headings":"","what":"📝 Release Notes Template","title":"Release Checklist for tuber v1.1.0","text":"Title: tuber v1.1.0: Major Stability Performance Release Description: release resolves critical issues making tuber unreliable production use. Key improvements include: 🔧 Fixed Authentication: OAuth token caching now works properly ⚡ Performance: 100x faster comment processing, 50x fewer API calls channel stats 📊 Quota Management: New comprehensive quota tracking system 🛠️ Error Handling: Graceful handling edge cases API errors 🌐 Unicode Support: Consistent UTF-8 processing across functions Breaking Changes: None - changes backwards compatible Migration: Users existing code see immediate improvements without changes","code":""},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"chart_with_upwards_trend-post-release-tasks","dir":"","previous_headings":"","what":"📈 Post-Release Tasks","title":"Release Checklist for tuber v1.1.0","text":"Monitor Issues: Watch new reports release Update Documentation: Ensure website reflects new features Community Outreach: Consider blog post improvements Performance Monitoring: Collect feedback quota usage improvements","code":""},{"path":"https://soodoku.github.io/tuber/RELEASE_CHECKLIST.html","id":"dart-success-metrics","dir":"","previous_headings":"","what":"🎯 Success Metrics","title":"Release Checklist for tuber v1.1.0","text":"release resolve: - ✅ authentication issues (#135, #107, #64) - ✅ pagination performance problems (#62, #111, #115) - ✅ channel handling issues (#95, #122, #73) - ✅ quota management concerns (#116) - ✅ text processing issues (#80, #79) Expected user feedback: “Finally works reliably!”, “Much faster now”, “Quota management great!”","code":""},{"path":[]},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"install-load-the-package","dir":"Articles","previous_headings":"tuber: Access YouTube from R","what":"Install, Load the package","title":"Using tuber","text":"install latest version CRAN: latest development version package always GitHub. Instructions installing package Github provided . Next, load package:","code":"install.packages(\"tuber\") devtools::install_github(\"gojiplus/tuber\", build_vignettes = TRUE) library(tuber)"},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"using-the-package","dir":"Articles","previous_headings":"tuber: Access YouTube from R","what":"Using the package","title":"Using tuber","text":"get going, get application id password Google Developer Console (see https://developers.google.com/youtube/v3/getting-started). Enable YouTube APIs. Create OAuth credentials, sure select ‘’ Application Type. set application id password via yt_oauth function. information YouTube OAuth, see YouTube OAuth Guide.","code":"yt_oauth(\"998136489867-5t3tq1g7hbovoj46dreqd6k5kd35ctjn.apps.googleusercontent.com\", \"MbOSt6cQhhFkwETXKur-L9rN\") ## Waiting for authentication in browser... ## Press Esc/Ctrl + C to abort ## Authentication complete."},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"get-statistics-of-a-video","dir":"Articles","previous_headings":"tuber: Access YouTube from R > Using the package","what":"Get Statistics of a Video","title":"Using tuber","text":"","code":"get_stats(video_id=\"N708P-A45D0\") ## No. of Views 525112  ## No. of Likes 5576  ## No. of Dislikes 3564  ## No. of Favorites 0  ## No. of Comments 5329"},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"get-information-about-a-video","dir":"Articles","previous_headings":"tuber: Access YouTube from R > Using the package","what":"Get Information About a Video","title":"Using tuber","text":"","code":"get_video_details(video_id=\"N708P-A45D0\")"},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"get-caption-of-a-video","dir":"Articles","previous_headings":"tuber: Access YouTube from R > Using the package","what":"Get Caption of a Video","title":"Using tuber","text":"","code":"get_captions(video_id=\"yJXTXN4xrI8\") ## <?xml version=\"1.0\" encoding=\"utf-8\"?> ## <transcript> ##   <text start=\"6.614\" dur=\"1.549\">Every four seconds,<\/text> ##   <text start=\"8.163\" dur=\"1.534\">someone is diagnosed with<\/text> ##   <text start=\"9.697\" dur=\"1.885\">Alzheimer&amp;#39;s disease.<\/text> ##   <text start=\"11.582\" dur=\"2.172\">It&amp;#39;s the most common cause of dementia,<\/text> ##   <text start=\"13.754\" dur=\"2.859\">affecting over 40 million people worldwide,<\/text> ##   <text start=\"16.613\" dur=\"2.52\">and yet finding a cure is something that still<\/text> ##   <text start=\"19.133\" dur=\"2.482\">eludes researchers today.<\/text> ##   <text start=\"21.615\" dur=\"3.273\">Dr. Alois Alzheimer, a German psychiatrist,<\/text> ##   <text start=\"24.888\" dur=\"3.047\">first described the symptoms in 1901<\/text> ##   <text start=\"27.935\" dur=\"2.46\">when he noticed that a particular hospital patient<\/text> ##   <text start=\"30.395\" dur=\"1.917\">had some peculiar problems,<\/text> ##   <text start=\"32.312\" dur=\"1.803\">including difficulty sleeping,<\/text> ##   <text start=\"34.115\" dur=\"3.37\">disturbed memory, drastic mood changes,<\/text> ##   <text start=\"37.485\" dur=\"2.166\">and increasing confusion.<\/text> ##   <text start=\"39.651\" dur=\"1.877\">When the patient passed away,<\/text> ##   <text start=\"41.528\" dur=\"2.211\">Alzheimer was able to do an autopsy<\/text> ##   <text start=\"43.739\" dur=\"2.04\">and test his idea that perhaps<\/text> ##   <text start=\"45.779\" dur=\"2.421\">her symptoms were caused by irregularities<\/text> ##   <text start=\"48.2\" dur=\"1.963\">in the brain&amp;#39;s structure.<\/text> ##   <text start=\"50.163\" dur=\"1.951\">What he found beneath the microscope<\/text> ##   <text start=\"52.114\" dur=\"2.473\">were visible differences in brain tissue<\/text> ##   <text start=\"54.587\" dur=\"2.194\">in the form of misfolded proteins<\/text> ##   <text start=\"56.781\" dur=\"1.334\">called plaques,<\/text> ##   <text start=\"58.115\" dur=\"2.433\">and neurofibrillary tangles.<\/text> ##   <text start=\"60.548\" dur=\"2.378\">Those plaques and tangles work together<\/text> ##   <text start=\"62.926\" dur=\"2.419\">to break down the brain&amp;#39;s structure.<\/text> ##   <text start=\"65.345\" dur=\"1.792\">Plaques arise when another protein<\/text> ##   <text start=\"67.137\" dur=\"2.643\">in the fatty membrane surrounding nerve cells<\/text> ##   <text start=\"69.78\" dur=\"2.697\">gets sliced up by a particular enzyme,<\/text> ##   <text start=\"72.477\" dur=\"2.585\">resulting in beta-amyloid proteins,<\/text> ##   <text start=\"75.062\" dur=\"1.799\">which are sticky and have a tendency<\/text> ##   <text start=\"76.861\" dur=\"1.587\">to clump together.<\/text> ##   <text start=\"78.448\" dur=\"1.952\">That clumping is what forms the things<\/text> ##   <text start=\"80.4\" dur=\"2.131\">we know as plaques.<\/text> ##   <text start=\"82.531\" dur=\"1.793\">These clumps block signaling<\/text> ##   <text start=\"84.324\" dur=\"1.502\">and, therefore, communication<\/text> ##   <text start=\"85.826\" dur=\"2.336\">between cells, and also seem to trigger<\/text> ##   <text start=\"88.162\" dur=\"2.536\">immune reactions that cause the destruction<\/text> ##   <text start=\"90.698\" dur=\"2.134\">of disabled nerve cells.<\/text> ##   <text start=\"92.832\" dur=\"2.782\">In Alzheimer&amp;#39;s disease, neurofibrillary tangles<\/text> ##   <text start=\"95.614\" dur=\"3.085\">are built from a protein known as tau.<\/text> ##   <text start=\"98.699\" dur=\"2.89\">The brain&amp;#39;s nerve cells contain a network of tubes<\/text> ##   <text start=\"101.589\" dur=\"2.024\">that act like a highway for food molecules<\/text> ##   <text start=\"103.613\" dur=\"1.563\">among other things.<\/text> ##   <text start=\"105.176\" dur=\"2.543\">Usually, the tau protein ensures that these tubes<\/text> ##   <text start=\"107.719\" dur=\"2.256\">are straight, allowing molecules<\/text> ##   <text start=\"109.975\" dur=\"1.917\">to pass through freely.<\/text> ##   <text start=\"111.892\" dur=\"1.709\">But in Alzheimer&amp;#39;s disease,<\/text> ##   <text start=\"113.601\" dur=\"3.463\">the protein collapses into twisted strands or tangles,<\/text> ##   <text start=\"117.064\" dur=\"1.832\">making the tubes disintegrate,<\/text> ##   <text start=\"118.896\" dur=\"2.505\">obstructing nutrients from reaching the nerve cell<\/text> ##   <text start=\"121.401\" dur=\"2.628\">and leading to cell death.<\/text> ##   <text start=\"124.029\" dur=\"2.336\">The destructive pairing of plaques and tangles<\/text> ##   <text start=\"126.365\" dur=\"2.332\">starts in a region called the hippocampus,<\/text> ##   <text start=\"128.697\" dur=\"2.419\">which is responsible for forming memories.<\/text> ##   <text start=\"131.116\" dur=\"1.713\">That&amp;#39;s why short-term memory loss<\/text> ##   <text start=\"132.829\" dur=\"2.702\">is usually the first symptom of Alzheimer&amp;#39;s.<\/text> ##   <text start=\"135.531\" dur=\"1.884\">The proteins then progressively invade<\/text> ##   <text start=\"137.415\" dur=\"1.616\">other parts of the brain,<\/text> ##   <text start=\"139.031\" dur=\"1.834\">creating unique changes that signal<\/text> ##   <text start=\"140.865\" dur=\"2.416\">various stages of the disease.<\/text> ##   <text start=\"143.281\" dur=\"1.235\">At the front of the brain,<\/text> ##   <text start=\"144.516\" dur=\"3.536\">the proteins destroy the ability to process logical thoughts.<\/text> ##   <text start=\"148.052\" dur=\"3.168\">Next, they shift to the region that controls emotions,<\/text> ##   <text start=\"151.22\" dur=\"2.337\">resulting in erratic mood changes.<\/text> ##   <text start=\"153.557\" dur=\"1.224\">At the top of the brain,<\/text> ##   <text start=\"154.781\" dur=\"2.364\">they cause paranoia and hallucinations,<\/text> ##   <text start=\"157.145\" dur=\"2.053\">and once they reach the brain&amp;#39;s rear,<\/text> ##   <text start=\"159.198\" dur=\"1.999\">the plaques and tangles work together<\/text> ##   <text start=\"161.197\" dur=\"2.418\">to erase the mind&amp;#39;s deepest memories.<\/text> ##   <text start=\"163.615\" dur=\"1.621\">Eventually the control centers governing<\/text> ##   <text start=\"165.236\" dur=\"2.794\">heart rate and breathing are overpowered as well<\/text> ##   <text start=\"168.03\" dur=\"1.796\">resulting in death.<\/text> ##   <text start=\"169.826\" dur=\"2.039\">The immensely destructive nature of this disease<\/text> ##   <text start=\"171.865\" dur=\"2.999\">has inspired many researchers to look for a cure<\/text> ##   <text start=\"174.864\" dur=\"3.752\">but currently they&amp;#39;re focused on slowing its progression.<\/text> ##   <text start=\"178.616\" dur=\"1.387\">One temporary treatment<\/text> ##   <text start=\"180.003\" dur=\"2.627\">helps reduce the break down of acetylcholine,<\/text> ##   <text start=\"182.63\" dur=\"2.653\">an important chemical messenger in the brain<\/text> ##   <text start=\"185.283\" dur=\"2.519\">which is decreased in Alzheimer&amp;#39;s patients<\/text> ##   <text start=\"187.802\" dur=\"3.063\">due to the death of the nerve cells that make it.<\/text> ##   <text start=\"190.865\" dur=\"2.316\">Another possible solution is a vaccine<\/text> ##   <text start=\"193.181\" dur=\"2.461\">that trains the body&amp;#39;s immune system to attack<\/text> ##   <text start=\"195.642\" dur=\"3.587\">beta-amyloid plaques before they can form clumps.<\/text> ##   <text start=\"199.229\" dur=\"2.801\">But we still need to find an actual cure.<\/text> ##   <text start=\"202.03\" dur=\"1.75\">Alzheimer&amp;#39;s disease was discovered<\/text> ##   <text start=\"203.78\" dur=\"1.669\">more than a century ago,<\/text> ##   <text start=\"205.449\" dur=\"2.664\">and yet still it is not well understood.<\/text> ##   <text start=\"208.113\" dur=\"1.667\">Perhaps one day we&amp;#39;ll grasp<\/text> ##   <text start=\"209.78\" dur=\"2.916\">the exact mechanisms at work behind this threat<\/text> ##   <text start=\"212.696\" dur=\"2.214\">and a solution will be unearthed.<\/text> ## <\/transcript> ##"},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"search-videos","dir":"Articles","previous_headings":"tuber: Access YouTube from R > Using the package","what":"Search Videos","title":"Using tuber","text":"","code":"res <- yt_search(\"Barack Obama\") head(res[, 1:3]) ##                publishedAt                channelId                                                                           title ## 1 2016-09-06T11:20:20.000Z UC6CZwQv8cbZco3wOwtp7W2g             See How Obama Ignored Xi Jinping & Welcomed PM Modi At G20 Summit ! ## 2 2016-09-05T06:01:17.000Z UC6RJ7-PaXg6TIH2BzZfTV7w                                   PM Modi Meets Barack Obama at G20 Summit 2016 ## 3 2008-03-24T16:31:53.000Z UC4o-h3-3GhrmHB6ytgO3oIQ                                      Top 20 Obama Pastor Comments You Never Saw ## 4 2016-09-03T06:43:38.000Z UC5aeU5hk31cLzq_sAExLVWg                                     LIVE: Obama arrives in China for G20 summit ## 5 2016-09-20T01:30:42.000Z UCmWHDwXFvdKc8OVBbb2dMZg Buy Lot of 20 Obama, 44th U.S. President, 56th Presidential Inauguration coins! ## 6 2016-09-03T06:57:05.000Z UCgrNz-aDmcr2uuto8_DL2jg                           US President Obama arrives in Hangzhou for G20 Summit"},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"get-comments-on-a-video","dir":"Articles","previous_headings":"tuber: Access YouTube from R > Using the package","what":"Get Comments on a video","title":"Using tuber","text":"","code":"res <- get_comment_threads(c(video_id=\"N708P-A45D0\")) head(res) ##    authorDisplayName                                                                              authorProfileImageUrl                                        authorChannelUrl ## 1             Tony Rx https://lh5.googleusercontent.com/-OL_t2gRZ8RI/AAAAAAAAAAI/AAAAAAAAACg/tXnqTDNYXec/photo.jpg?sz=50 http://www.youtube.com/channel/UCqKvEBPMtbmh020d56WrQXQ ## 2       Kevin Manning https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50 http://www.youtube.com/channel/UCEF-WytcLvgijQIklAbteUw ## 3       Kevin Manning https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50 http://www.youtube.com/channel/UCEF-WytcLvgijQIklAbteUw ## 4 TheDrunkenRocketMan https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50 http://www.youtube.com/channel/UCvTypSrsihX3fr2zCZivmwA ## 5          pangratata https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50 http://www.youtube.com/channel/UCETB8ILZueyFMCFWMF0p3Yg ## 6          pangratata https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50 http://www.youtube.com/channel/UCETB8ILZueyFMCFWMF0p3Yg"},{"path":"https://soodoku.github.io/tuber/articles/tuber-ex.html","id":"get-statistics-of-all-the-videos-in-a-channel","dir":"Articles","previous_headings":"tuber: Access YouTube from R","what":"Get statistics of all the videos in a channel","title":"Using tuber","text":"need find channel ID username, list_channel_resources function can help. can use like:","code":"a <- list_channel_resources(filter = c(channel_id = \"UCT5Cx1l4IS3wHkJXNyuj4TA\"), part=\"contentDetails\")  # Uploaded playlists: playlist_id <- a$items[[1]]$contentDetails$relatedPlaylists$uploads  # Get videos on the playlist vids <- get_playlist_items(filter= c(playlist_id=playlist_id))   # Video ids vid_ids <- as.vector(vids$contentDetails.videoId)  # Function to scrape stats for all vids get_all_stats <- function(id) {   get_stats(id) }   # Get stats and convert results to data frame  res <- lapply(vid_ids, get_all_stats) res_df <- do.call(rbind, lapply(res, data.frame))  head(res_df) res = list_channel_resources(filter = c(username = \"GoogleDevelopers\"), part=\"id\")  # Parse out channel_id if(!is.null(res$items[[1]]$id)){   channel_id <- res$items[[1]]$id } else {   stop(\"User not found\")  } # channel_id should be UC_x5XG1OV2P6uZZ5FSM9Ttw ##            id viewCount likeCount dislikeCount favoriteCount commentCount ## 1 91gZ4taDiDE       906         4            1             0            0  ## 2 bHPCvSqTxn4       706         0            0             0            0  ## 3 h2UPH87kjhc       458         1            0             0            0 ## 4 E2VtxjljZCE       391         0            0             0            0  ## 5 5Ajfk620fA0    175000         5            0             0            0  ## 6 PdI3HjulcA4       575         3            2             0            3"},{"path":"https://soodoku.github.io/tuber/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gaurav Sood. Author, maintainer. Kate Lyons. Contributor. John Muschelli. Contributor.","code":""},{"path":"https://soodoku.github.io/tuber/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gaurav Sood (2023). tuber: Access YouTube R. R package version 0.9.9. https://CRAN.R-project.org/package=tuber","code":"@Manual{,   title = {tuber: Access YouTube from R},   author = {Gaurav Sood},   year = {2023},   note = {R package version 0.9.9},   url = {https://CRAN.R-project.org/package=tuber}, }"},{"path":"https://soodoku.github.io/tuber/index.html","id":"sweet_potato-tuber-access-youtube-api-via-r","dir":"","previous_headings":"","what":":sweet_potato: tuber: Access YouTube API via R","title":"Client for the YouTube API","text":"Access YouTube API via R. Get comments posted YouTube videos, get information many times video liked, search videos particular content, much . can also get closed captions videos . learn YouTube API, see https://developers.google.com/youtube/v3/.","code":""},{"path":"https://soodoku.github.io/tuber/index.html","id":"installation","dir":"","previous_headings":":sweet_potato: tuber: Access YouTube API via R","what":"Installation","title":"Client for the YouTube API","text":"get current development version GitHub: get quick overview important functions tuber, check article.","code":"# install.packages(\"devtools\") devtools::install_github(\"soodoku/tuber\", build_vignettes = TRUE)"},{"path":"https://soodoku.github.io/tuber/index.html","id":"using-tuber","dir":"","previous_headings":":sweet_potato: tuber: Access YouTube API via R","what":"Using tuber","title":"Client for the YouTube API","text":"get going, get application id password Google Developer Console (see https://developers.google.com/youtube/v3/getting-started). Enable YouTube APIs. set application id password via yt_oauth function. information YouTube OAuth, see YouTube OAuth Guide. session open browser window authentication, pass use_oob = TRUE yt_oauth() authentication can completed via --band code. force re-authentication time, delete .httr-oauth file working directory. Note: ubuntu, may run following anything: Get Statistics Video Get Information Video Get Captions Video Note: previously possible get captions videos “Community contributions” enabled. However, since YouTube removed option September 2020, get_captions function now works videos created account API credentials use. alternative collecting YouTube video captions youtubecaption package. Search Videos Get Comments Including Replies","code":"yt_oauth(\"app_id\", \"app_password\") httr::set_config(httr::config( ssl_verifypeer = 0L ) ) get_stats(video_id = \"N708P-A45D0\") get_video_details(video_id = \"N708P-A45D0\") get_captions(video_id = \"yJXTXN4xrI8\") yt_search(\"Barack Obama\") get_all_comments(video_id = \"a-UQz7fqR3w\")"},{"path":"https://soodoku.github.io/tuber/index.html","id":"license","dir":"","previous_headings":":sweet_potato: tuber: Access YouTube API via R","what":"License","title":"Client for the YouTube API","text":"Scripts released MIT License.","code":""},{"path":"https://soodoku.github.io/tuber/index.html","id":"contributor-code-of-conduct","dir":"","previous_headings":":sweet_potato: tuber: Access YouTube API via R","what":"Contributor Code of Conduct","title":"Client for the YouTube API","text":"project welcomes contributions everyone! fact, depends . maintain welcoming atmosphere, collaborate fun productive way, expect contributors project abide Contributor Code Conduct.","code":""},{"path":"https://soodoku.github.io/tuber/reference/add_video_to_playlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Video to Playlist — add_video_to_playlist","title":"Add Video to Playlist — add_video_to_playlist","text":"Add Video Playlist","code":""},{"path":"https://soodoku.github.io/tuber/reference/add_video_to_playlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Video to Playlist — add_video_to_playlist","text":"","code":"add_video_to_playlist(playlist_id, video_id, position = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/add_video_to_playlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Video to Playlist — add_video_to_playlist","text":"playlist_id string; Required. ID playlist. video_id string; Required. ID video add. position numeric; Optional. position video playlist. provided, video added end playlist. ... Additional arguments passed tuber_POST_json.","code":""},{"path":"https://soodoku.github.io/tuber/reference/add_video_to_playlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Video to Playlist — add_video_to_playlist","text":"Details added video playlist.","code":""},{"path":"https://soodoku.github.io/tuber/reference/add_video_to_playlist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Video to Playlist — add_video_to_playlist","text":"https://developers.google.com/youtube/v3/docs/playlistItems/insert","code":""},{"path":"https://soodoku.github.io/tuber/reference/add_video_to_playlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Video to Playlist — add_video_to_playlist","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  add_video_to_playlist(playlist_id = \"YourPlaylistID\", video_id = \"2_gLD1jarfU\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/change_playlist_title.html","id":null,"dir":"Reference","previous_headings":"","what":"Change the title of a YouTube playlist. — change_playlist_title","title":"Change the title of a YouTube playlist. — change_playlist_title","text":"function updates title existing YouTube playlist using YouTube Data API.","code":""},{"path":"https://soodoku.github.io/tuber/reference/change_playlist_title.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change the title of a YouTube playlist. — change_playlist_title","text":"","code":"change_playlist_title(playlist_id, new_title)"},{"path":"https://soodoku.github.io/tuber/reference/change_playlist_title.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change the title of a YouTube playlist. — change_playlist_title","text":"playlist_id character string specifying ID playlist want update. new_title character string specifying new title playlist.","code":""},{"path":"https://soodoku.github.io/tuber/reference/change_playlist_title.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change the title of a YouTube playlist. — change_playlist_title","text":"list containing server response update attempt.","code":""},{"path":"https://soodoku.github.io/tuber/reference/change_playlist_title.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change the title of a YouTube playlist. — change_playlist_title","text":"","code":"if (FALSE) { # \\dontrun{ change_playlist_title(playlist_id = \"YourPlaylistID\", new_title = \"New Playlist Title\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/clean_youtube_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean and Normalize YouTube Text Data — clean_youtube_text","title":"Clean and Normalize YouTube Text Data — clean_youtube_text","text":"Applies consistent cleaning YouTube text fields","code":""},{"path":"https://soodoku.github.io/tuber/reference/clean_youtube_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean and Normalize YouTube Text Data — clean_youtube_text","text":"","code":"clean_youtube_text(   text,   remove_html = TRUE,   normalize_whitespace = TRUE,   max_length = NULL )"},{"path":"https://soodoku.github.io/tuber/reference/clean_youtube_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean and Normalize YouTube Text Data — clean_youtube_text","text":"text Character vector text clean remove_html Boolean. Remove HTML tags. Default: TRUE normalize_whitespace Boolean. Normalize whitespace. Default: TRUE max_length Integer. Maximum length (NULL limit). Default: NULL","code":""},{"path":"https://soodoku.github.io/tuber/reference/clean_youtube_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean and Normalize YouTube Text Data — clean_youtube_text","text":"Cleaned character vector","code":""},{"path":"https://soodoku.github.io/tuber/reference/create_playlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create New Playlist — create_playlist","title":"Create New Playlist — create_playlist","text":"Create New Playlist","code":""},{"path":"https://soodoku.github.io/tuber/reference/create_playlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create New Playlist — create_playlist","text":"","code":"create_playlist(title, description, status, ...)"},{"path":"https://soodoku.github.io/tuber/reference/create_playlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create New Playlist — create_playlist","text":"title string; Required. title playlist. description string; Optional. description playlist. status string; Optional. Default: 'public'. Can one : 'private', 'public', 'unlisted'. ... Additional arguments passed tuber_POST.","code":""},{"path":"https://soodoku.github.io/tuber/reference/create_playlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create New Playlist — create_playlist","text":"created playlist's details.","code":""},{"path":"https://soodoku.github.io/tuber/reference/create_playlist.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create New Playlist — create_playlist","text":"https://developers.google.com/youtube/v3/docs/playlists/insert","code":""},{"path":"https://soodoku.github.io/tuber/reference/create_playlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create New Playlist — create_playlist","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  create_playlist(title = \"My New Playlist\", description = \"This is a test playlist.\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/delete_captions.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a Particular Caption Track — delete_captions","title":"Delete a Particular Caption Track — delete_captions","text":"Delete Particular Caption Track","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_captions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a Particular Caption Track — delete_captions","text":"","code":"delete_captions(id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/delete_captions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a Particular Caption Track — delete_captions","text":"id String. Required. id caption track retrieved ... Additional arguments passed tuber_DELETE.","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_captions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete a Particular Caption Track — delete_captions","text":"https://developers.google.com/youtube/v3/docs/captions/delete","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_captions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a Particular Caption Track — delete_captions","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  delete_captions(id = \"y3ElXcEME3lSISz6izkWVT5GvxjPu8pA\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/delete_channel_sections.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete Channel Sections — delete_channel_sections","title":"Delete Channel Sections — delete_channel_sections","text":"Delete Channel Section","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_channel_sections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete Channel Sections — delete_channel_sections","text":"","code":"delete_channel_sections(id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/delete_channel_sections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete Channel Sections — delete_channel_sections","text":"id Required. ID channel section. ... Additional arguments passed tuber_DELETE.","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_channel_sections.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete Channel Sections — delete_channel_sections","text":"https://developers.google.com/youtube/v3/docs/channelSections/delete","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_channel_sections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete Channel Sections — delete_channel_sections","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  delete_channel_sections(c(channel_id = \"UCRw8bIz2wMLmfgAgWm903cA\")) } # }"},{"path":"https://soodoku.github.io/tuber/reference/delete_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a Particular Comment — delete_comments","title":"Delete a Particular Comment — delete_comments","text":"Delete Particular Comment","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a Particular Comment — delete_comments","text":"","code":"delete_comments(id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/delete_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a Particular Comment — delete_comments","text":"id String. Required. id comment retrieved ... Additional arguments passed tuber_DELETE.","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_comments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete a Particular Comment — delete_comments","text":"https://developers.google.com/youtube/v3/docs/comments/delete","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a Particular Comment — delete_comments","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  delete_comments(id = \"y3ElXcEME3lSISz6izkWVT5GvxjPu8pA\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/delete_playlist_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a Playlist Item — delete_playlist_items","title":"Delete a Playlist Item — delete_playlist_items","text":"Delete Playlist Item","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_playlist_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a Playlist Item — delete_playlist_items","text":"","code":"delete_playlist_items(id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/delete_playlist_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a Playlist Item — delete_playlist_items","text":"id String. Required. id playlist item deleted ... Additional arguments passed tuber_DELETE.","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_playlist_items.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete a Playlist Item — delete_playlist_items","text":"https://developers.google.com/youtube/v3/docs/playlistItems/delete","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_playlist_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a Playlist Item — delete_playlist_items","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  delete_playlist_items(id = \"YourPlaylistItemID\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/delete_playlists.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a Playlist — delete_playlists","title":"Delete a Playlist — delete_playlists","text":"Delete Playlist","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_playlists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a Playlist — delete_playlists","text":"","code":"delete_playlists(id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/delete_playlists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a Playlist — delete_playlists","text":"id String. Required. id playlist deleted ... Additional arguments passed tuber_DELETE.","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_playlists.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete a Playlist — delete_playlists","text":"https://developers.google.com/youtube/v3/docs/playlists/delete","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_playlists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a Playlist — delete_playlists","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  delete_playlists(id = \"y3ElXcEME3lSISz6izkWVT5GvxjPu8pA\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/delete_videos.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete a Video — delete_videos","title":"Delete a Video — delete_videos","text":"Delete Video","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_videos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete a Video — delete_videos","text":"","code":"delete_videos(id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/delete_videos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete a Video — delete_videos","text":"id String. Required. id video deleted ... Additional arguments passed tuber_DELETE.","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_videos.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Delete a Video — delete_videos","text":"https://developers.google.com/youtube/v3/docs/playlistItems/delete","code":""},{"path":"https://soodoku.github.io/tuber/reference/delete_videos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete a Video — delete_videos","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  delete_videos(id = \"y3ElXcEME3lSISz6izkWVT5GvxjPu8pA\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/exponential_backoff.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Exponential Backoff — exponential_backoff","title":"Add Exponential Backoff — exponential_backoff","text":"Internal function handle rate limiting exponential backoff","code":""},{"path":"https://soodoku.github.io/tuber/reference/exponential_backoff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Exponential Backoff — exponential_backoff","text":"","code":"exponential_backoff(attempt_number, max_attempts = 5, base_delay = 1)"},{"path":"https://soodoku.github.io/tuber/reference/exponential_backoff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Exponential Backoff — exponential_backoff","text":"attempt_number Integer. Current attempt number max_attempts Integer. Maximum attempts giving base_delay Numeric. Base delay seconds","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_channel_video_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistics on all the videos in a Channel — get_all_channel_video_stats","title":"Get statistics on all the videos in a Channel — get_all_channel_video_stats","text":"Iterates channel's uploads playlist, collecting video IDs page pages available. Statistics details fetched every video.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_channel_video_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistics on all the videos in a Channel — get_all_channel_video_stats","text":"","code":"get_all_channel_video_stats(channel_id = NULL, mine = FALSE, ...)"},{"path":"https://soodoku.github.io/tuber/reference/get_all_channel_video_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistics on all the videos in a Channel — get_all_channel_video_stats","text":"channel_id Character. Id channel mine Boolean. TRUE want fetch stats channel. Default FALSE. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_channel_video_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistics on all the videos in a Channel — get_all_channel_video_stats","text":"data.frame containing video metadata along view, like,   dislike comment counts. channel_id mistyped information, empty list returned","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_channel_video_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get statistics on all the videos in a Channel — get_all_channel_video_stats","text":"https://developers.google.com/youtube/v3/docs/channels/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_channel_video_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistics on all the videos in a Channel — get_all_channel_video_stats","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_all_channel_video_stats(channel_id=\"UCxOhDvtaoXDAB336AolWs3A\") get_all_channel_video_stats(channel_id=\"UCMtFAi84ehTSYSE9Xo\") # Incorrect channel ID } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_all_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all the comments for a video including replies — get_all_comments","title":"Get all the comments for a video including replies — get_all_comments","text":"Get comments video including replies","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all the comments for a video including replies — get_all_comments","text":"","code":"get_all_comments(video_id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/get_all_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all the comments for a video including replies — get_all_comments","text":"video_id string; Required. video_id: video ID. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all the comments for a video including replies — get_all_comments","text":"data.frame following columns: authorDisplayName, authorProfileImageUrl, authorChannelUrl,  authorChannelId.value, videoId, textDisplay, canRate, viewerRating, likeCount, publishedAt, updatedAt, id, moderationStatus, parentId","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_comments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get all the comments for a video including replies — get_all_comments","text":"https://developers.google.com/youtube/v3/docs/commentThreads/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_all_comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all the comments for a video including replies — get_all_comments","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_all_comments(video_id = \"a-UQz7fqR3w\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_captions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Particular Caption Track — get_captions","title":"Get Particular Caption Track — get_captions","text":"getting captions v3 API, must specify id resource. Check list_caption_tracks information.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_captions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Particular Caption Track — get_captions","text":"","code":"get_captions(id = NULL, lang = \"en\", format = \"sbv\", as_raw = TRUE, ...)"},{"path":"https://soodoku.github.io/tuber/reference/get_captions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Particular Caption Track — get_captions","text":"id String. Required. id caption track retrieved lang Optional. Default en. format Optional. Default sbv. as_raw FALSE captions converted character string versus raw vector ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_captions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Particular Caption Track — get_captions","text":"String.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_captions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Particular Caption Track — get_captions","text":"https://developers.google.com/youtube/v3/docs/captions/download","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_captions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Particular Caption Track — get_captions","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_captions(id = \"y3ElXcEME3lSISz6izkWVT5GvxjPu8pA\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_channel_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistics of a Channel — get_channel_stats","title":"Get statistics of a Channel — get_channel_stats","text":"Get statistics Channel","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_channel_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistics of a Channel — get_channel_stats","text":"","code":"get_channel_stats(channel_id = NULL, mine = NULL, ...)  list_my_channel(...)"},{"path":"https://soodoku.github.io/tuber/reference/get_channel_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistics of a Channel — get_channel_stats","text":"channel_id Character. Id channel mine Boolean. TRUE want fetch stats channel. Default NULL. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_channel_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistics of a Channel — get_channel_stats","text":"nested named list top element names: kind, etag, id, snippet (list details channel including title), statistics (list 5) channel_id mistyped information, empty list returned","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_channel_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get statistics of a Channel — get_channel_stats","text":"https://developers.google.com/youtube/v3/docs/channels/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_channel_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistics of a Channel — get_channel_stats","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_channel_stats(channel_id=\"UCMtFAi84ehTSYSE9XoHefig\") get_channel_stats(channel_id=\"UCMtFAi84ehTSYSE9Xo\") # Incorrect channel ID } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_comment_threads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Comments Threads — get_comment_threads","title":"Get Comments Threads — get_comment_threads","text":"Get Comments Threads","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comment_threads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Comments Threads — get_comment_threads","text":"","code":"get_comment_threads(   filter = NULL,   part = \"snippet\",   text_format = \"html\",   simplify = TRUE,   max_results = 100,   page_token = NULL,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_comment_threads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Comments Threads — get_comment_threads","text":"filter string; Required. named vector length 1 potential names entry vector: video_id: video ID. channel_id: channel ID. thread_id: comma-separated list comment thread IDs threads_related_to_channel: channel ID. part Comment resource requested. Required. Comma separated list one following: id, snippet. e.g., \"id, snippet\", \"id\", etc. Default: snippet. text_format Data Type: Character. Default \"html\". takes \"html\" \"plainText\". Optional. simplify Data Type: Boolean. Default TRUE. TRUE, function returns data frame. Else list information returned. max_results Maximum number items returned.  Integer. Optional. Default 100. value greater 100 function fetches results. outcome simplified data.frame. page_token Specific page result set returned. Optional. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comment_threads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Comments Threads — get_comment_threads","text":"Nested named list. entry items list comments along meta information. Within items item snippet item topLevelComment$snippet$textDisplay contains actual comment. simplify TRUE, data.frame following columns: authorDisplayName, authorProfileImageUrl, authorChannelUrl, authorChannelId.value, videoId, textDisplay, canRate, viewerRating, likeCount, publishedAt, updatedAt","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comment_threads.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Comments Threads — get_comment_threads","text":"https://developers.google.com/youtube/v3/docs/commentThreads/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comment_threads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Comments Threads — get_comment_threads","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_comment_threads(filter = c(video_id = \"N708P-A45D0\")) get_comment_threads(filter = c(video_id = \"N708P-A45D0\"), max_results = 101) } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_comments.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Comments — get_comments","title":"Get Comments — get_comments","text":"Get Comments","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Comments — get_comments","text":"","code":"get_comments(   filter = NULL,   part = \"snippet\",   max_results = 100,   text_format = \"html\",   page_token = NULL,   simplify = TRUE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_comments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Comments — get_comments","text":"filter string; Required. named vector length 1 potential names entry vector: comment_id: comment ID. parent_id: parent ID. part Comment resource requested. Required. Comma separated list one following: id, snippet. e.g., \"id, snippet\", \"id\", etc. Default: snippet. max_results Maximum number items returned. Integer. Optional. Can 20 100. Default 100. text_format Data Type: Character. Default \"html\". takes \"html\" \"plainText\". Optional. page_token Specific page result set returned. Optional. simplify Data Type: Boolean. Default TRUE. TRUE, function returns data frame. Else list information returned. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Comments — get_comments","text":"Nested named list. entry items list comments along meta information. Within items item snippet item topLevelComment$snippet$textDisplay contains actual comment. filter comment_id, simplify TRUE, correct comment id, returns data.frame following cols: id, authorDisplayName, authorProfileImageUrl, authorChannelUrl, value, textDisplay, canRate, viewerRating, likeCount publishedAt, updatedAt","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Comments — get_comments","text":"https://developers.google.com/youtube/v3/docs/comments/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_comments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Comments — get_comments","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_comments(filter = c(comment_id = \"z13dh13j5rr0wbmzq04cifrhtuypwl4hsdk\")) get_comments(filter = c(parent_id = \"z13ds5yxjq3zzptyx04chlkbhx2yh3ezxtc0k\")) get_comments(filter = c(comment_id = \"z13dh13j5rr0wbmzq04cifrhtuypwl4hsdk,              z13dh13j5rr0wbmzq04cifrhtuypwl4hsdk\")) } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Playlist Item IDs — get_playlist_item_ids","title":"Get Playlist Item IDs — get_playlist_item_ids","text":"Get Playlist Item IDs","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Playlist Item IDs — get_playlist_item_ids","text":"","code":"get_playlist_item_ids(   filter = NULL,   part = \"contentDetails\",   max_results = 50,   video_id = NULL,   page_token = NULL,   simplify = TRUE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Playlist Item IDs — get_playlist_item_ids","text":"filter string; Required. named vector length 1 potential names entry vector: item_id: comma-separated list one unique playlist item IDs. playlist_id: YouTube playlist ID. part Required. Comma separated string including one following: contentDetails, id, snippet, status. Default: contentDetails. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger multiple requests may increase API quota usage. video_id Optional. request return playlist items contain specified video. page_token specific page result set returned, optional simplify returns data.frame rather list. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Playlist Item IDs — get_playlist_item_ids","text":"playlist items","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_ids.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Playlist Item IDs — get_playlist_item_ids","text":"https://developers.google.com/youtube/v3/docs/playlists/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Playlist Item IDs — get_playlist_item_ids","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_playlist_items(filter =                        c(playlist_id = \"PLrEnWoR732-CN09YykVof2lxdI3MLOZda\")) get_playlist_items(filter =                        c(playlist_id = \"PL0fOlXVeVW9QMO3GoESky4yDgQfK2SsXN\"),                        max_results = 51) } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_videoids.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Playlist Item Video IDs — get_playlist_item_videoids","title":"Get Playlist Item Video IDs — get_playlist_item_videoids","text":"Get Playlist Item Video IDs","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_videoids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Playlist Item Video IDs — get_playlist_item_videoids","text":"","code":"get_playlist_item_videoids(   filter = NULL,   part = \"contentDetails\",   max_results = 50,   video_id = NULL,   page_token = NULL,   simplify = TRUE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_videoids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Playlist Item Video IDs — get_playlist_item_videoids","text":"filter string; Required. named vector length 1 potential names entry vector: item_id: comma-separated list one unique playlist item IDs. playlist_id: YouTube playlist ID. part Required. Comma separated string including one following: contentDetails, id, snippet, status. Default: contentDetails. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger multiple requests may increase API quota usage. video_id Optional. request return playlist items contain specified video. page_token specific page result set returned, optional simplify returns data.frame rather list. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_videoids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Playlist Item Video IDs — get_playlist_item_videoids","text":"playlist items","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_videoids.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Playlist Item Video IDs — get_playlist_item_videoids","text":"https://developers.google.com/youtube/v3/docs/playlists/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_item_videoids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Playlist Item Video IDs — get_playlist_item_videoids","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_playlist_items(filter =                        c(playlist_id = \"YourPlaylistID\")) get_playlist_items(filter =                        c(playlist_id = \"YourPlaylistID\"),                        max_results = 51) } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Playlist Items — get_playlist_items","title":"Get Playlist Items — get_playlist_items","text":"Get Playlist Items","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Playlist Items — get_playlist_items","text":"","code":"get_playlist_items(   filter = NULL,   part = \"contentDetails\",   max_results = 50,   video_id = NULL,   page_token = NULL,   simplify = TRUE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Playlist Items — get_playlist_items","text":"filter string; Required. named vector length 1 potential names entry vector: item_id: comma-separated list one unique playlist item IDs. playlist_id: YouTube playlist ID. part Required. Comma separated string including one following: contentDetails, id, snippet, status. Default: contentDetails. max_results Maximum number items returned. Integer. Optional. Default 50. 50, additional requests made requested amount retrieved. Larger values may increase API quota usage. video_id Optional. request return playlist items contain specified video. page_token specific page result set returned, optional simplify returns data.frame rather list. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Playlist Items — get_playlist_items","text":"playlist items","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_items.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Playlist Items — get_playlist_items","text":"https://developers.google.com/youtube/v3/docs/playlists/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlist_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Playlist Items — get_playlist_items","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_playlist_items(filter =                        c(playlist_id = \"PLrEnWoR732-CN09YykVof2lxdI3MLOZda\")) get_playlist_items(filter =                        c(playlist_id = \"PL0fOlXVeVW9QMO3GoESky4yDgQfK2SsXN\"),                        max_results = 51) } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_playlists.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Playlists — get_playlists","title":"Get Playlists — get_playlists","text":"Get Playlists","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Playlists — get_playlists","text":"","code":"get_playlists(   filter = NULL,   part = \"snippet\",   max_results = 50,   hl = NULL,   page_token = NULL,   simplify = TRUE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_playlists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Playlists — get_playlists","text":"filter string; Required. named vector length 1 potential names entry vector: channel_id: ID channel playlist_id: YouTube playlist ID. part Required. One following: contentDetails, id, localizations, player, snippet, status. Default: contentDetails. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger additional requests may increase API quota usage. hl Language used text values. Optional. Default en-US. allowed language codes, see list_langs. page_token specific page result set returned, optional simplify Data Type: Boolean. Default TRUE. TRUE part requested contentDetails, function returns data.frame. Else list information returned. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Playlists — get_playlists","text":"playlists simplify TRUE, data.frame 4 columns returned: kind, etag, id, contentDetails.itemCount","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlists.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Playlists — get_playlists","text":"https://developers.google.com/youtube/v3/docs/playlists/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_playlists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Playlists — get_playlists","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_playlists(filter=c(channel_id=\"UCMtFAi84ehTSYSE9XoHefig\")) get_playlists(filter=c(channel_id=\"UCMtFAi84ehTSYSE9X\")) # incorrect Channel ID } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_related_videos.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Related Videos — get_related_videos","title":"Get Related Videos — get_related_videos","text":"Takes video id returns related videos","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_related_videos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Related Videos — get_related_videos","text":"","code":"get_related_videos(   video_id = NULL,   max_results = 50,   safe_search = \"none\",   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_related_videos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Related Videos — get_related_videos","text":"video_id Character. Required. default. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger multiple requests may increase API quota usage. safe_search Character. Optional. Takes one three values: 'moderate', 'none' (default) 'strict' ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_related_videos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Related Videos — get_related_videos","text":"data.frame 16 columns: video_id, rel_video_id, publishedAt, channelId, title, description, thumbnails.default.url, thumbnails.default.width, thumbnails.default.height, thumbnails.medium.url, thumbnails.medium.width, thumbnails.medium.height, thumbnails.high.url, thumbnails.high.width, thumbnails.high.height, channelTitle, liveBroadcastContent","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_related_videos.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Related Videos — get_related_videos","text":"https://developers.google.com/youtube/v3/docs/search/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_related_videos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Related Videos — get_related_videos","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_related_videos(video_id = \"yJXTXN4xrI8\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get statistics of a Video — get_stats","title":"Get statistics of a Video — get_stats","text":"Get statistics Video","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get statistics of a Video — get_stats","text":"","code":"get_stats(video_id = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/get_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get statistics of a Video — get_stats","text":"video_id Character. Id video. Required. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get statistics of a Video — get_stats","text":"list 6 elements: id, viewCount, likeCount, dislikeCount, favoriteCount, commentCount","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_stats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get statistics of a Video — get_stats","text":"https://developers.google.com/youtube/v3/docs/videos/list#parameters","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get statistics of a Video — get_stats","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_stats(video_id=\"N708P-A45D0\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_subscriptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Subscriptions — get_subscriptions","title":"Get Subscriptions — get_subscriptions","text":"Get Subscriptions","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_subscriptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Subscriptions — get_subscriptions","text":"","code":"get_subscriptions(   filter = NULL,   part = \"contentDetails\",   max_results = 50,   for_channel_id = NULL,   order = NULL,   page_token = NULL,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_subscriptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Subscriptions — get_subscriptions","text":"filter string; Required. named vector length 1 potential names entry vector: channel_id: ID channel. Required. default. subscription_id: YouTube subscription ID part Part resource requested. Required. Character. comma separated list one following: contentDetails, id, snippet, subscriberSnippet. e.g. \"id, snippet\",  \"id\", etc. Default: contentDetails. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger additional requests may increase API quota usage. for_channel_id Optional. String. comma-separated list channel IDs. Limits response subscriptions matching channels. order method used sort resources API response. Takes one following: alphabetical, relevance, unread page_token Specific page result set returned. Optional. String. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_subscriptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Subscriptions — get_subscriptions","text":"named list subscriptions","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_subscriptions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Subscriptions — get_subscriptions","text":"https://developers.google.com/youtube/v3/docs/subscriptions/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_subscriptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Subscriptions — get_subscriptions","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_subscriptions(filter = c(channel_id = \"UChTJTbr5kf3hYazJZO-euHg\")) } # }"},{"path":"https://soodoku.github.io/tuber/reference/get_video_details.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Details of a Video or Videos — get_video_details","title":"Get Details of a Video or Videos — get_video_details","text":"Get details video published, title, description, thumbnails, category etc.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_video_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Details of a Video or Videos — get_video_details","text":"","code":"get_video_details(   video_id = NULL,   part = \"snippet\",   as.data.frame = FALSE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/get_video_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Details of a Video or Videos — get_video_details","text":"video_id Comma separated list IDs videos details requested. Required. part Comma-separated vector video resource properties requested. Options include: contentDetails, fileDetails, id, liveStreamingDetails, localizations, player, processingDetails, recordingDetails, snippet, statistics, status, suggestions, topicDetails .data.frame Logical, returns requested information data.frame. work : fileDetails, suggestions, processingDetails ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_video_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Details of a Video or Videos — get_video_details","text":"list. part snippet, list following elements: id (video id passed), publishedAt, channelId,  title, description, thumbnails, channelTitle, categoryId, liveBroadcastContent, localized, defaultAudioLanguage","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_video_details.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get Details of a Video or Videos — get_video_details","text":"https://developers.google.com/youtube/v3/docs/videos/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/get_video_details.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Details of a Video or Videos — get_video_details","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  get_video_details(video_id = \"yJXTXN4xrI8\") get_video_details(video_id = \"yJXTXN4xrI8\", part = \"contentDetails\") # retrieve multiple parameters get_video_details(video_id = \"yJXTXN4xrI8\", part = c(\"contentDetails\", \"status\")) # get details for multiple videos as data frame get_video_details(video_id = c(\"LDZX4ooRsWs\", \"yJXTXN4xrI8\"), as.data.frame = TRUE) } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_abuse_report_reasons.html","id":null,"dir":"Reference","previous_headings":"","what":"List reasons that can be used to report abusive videos — list_abuse_report_reasons","title":"List reasons that can be used to report abusive videos — list_abuse_report_reasons","text":"List reasons can used report abusive videos","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_abuse_report_reasons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List reasons that can be used to report abusive videos — list_abuse_report_reasons","text":"","code":"list_abuse_report_reasons(part = \"id, snippet\", hl = \"en-US\", ...)"},{"path":"https://soodoku.github.io/tuber/reference/list_abuse_report_reasons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List reasons that can be used to report abusive videos — list_abuse_report_reasons","text":"part Caption resource requested. Required. Comma separated list one following: id, snippet. e.g., \"id, snippet\", \"id\", etc.  Default: snippet. hl Language used text values. Optional. Default en-US. allowed language codes, see list_langs. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_abuse_report_reasons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List reasons that can be used to report abusive videos — list_abuse_report_reasons","text":"results, empty data.frame returned part requested = \"id, snippet\" \"snippet\", data.frame 4 columns: etag, id, label, secReasons part requested = \"id\", data.frame 2 columns: etag, id","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_abuse_report_reasons.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List reasons that can be used to report abusive videos — list_abuse_report_reasons","text":"https://developers.google.com/youtube/v3/docs/videoAbuseReportReasons/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_abuse_report_reasons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List reasons that can be used to report abusive videos — list_abuse_report_reasons","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_abuse_report_reasons() list_abuse_report_reasons(part=\"id\") list_abuse_report_reasons(part=\"snippet\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_caption_tracks.html","id":null,"dir":"Reference","previous_headings":"","what":"List Captions of a Video — list_caption_tracks","title":"List Captions of a Video — list_caption_tracks","text":"List Captions Video","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_caption_tracks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Captions of a Video — list_caption_tracks","text":"","code":"list_caption_tracks(   part = \"snippet\",   video_id = NULL,   lang = \"en\",   id = NULL,   simplify = TRUE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/list_caption_tracks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Captions of a Video — list_caption_tracks","text":"part Caption resource requested. Required. Comma separated list one following: id, snippet. e.g., \"id, snippet\", \"id\" Default: snippet. video_id ID video whose captions requested. Required. default. lang Language caption; required; default English (\"en\") id comma-separated list IDs identify caption resources retrieved; optional; string simplify Boolean. Default TRUE. TRUE, part snippet, data.frame returned ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_caption_tracks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Captions of a Video — list_caption_tracks","text":"list caption tracks. simplify TRUE, data.frame returned following columns: videoId, lastUpdated, trackKind, language, name, audioTrackType, isCC, isLarge, isEasyReader, isDraft, isAutoSynced, status, id (caption id)","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_caption_tracks.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List Captions of a Video — list_caption_tracks","text":"https://developers.google.com/youtube/v3/docs/captions/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_caption_tracks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Captions of a Video — list_caption_tracks","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_caption_tracks(video_id = \"yJXTXN4xrI8\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_captions.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Video to Youtube — list_captions","title":"Upload Video to Youtube — list_captions","text":"Upload Video Youtube","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_captions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Video to Youtube — list_captions","text":"","code":"list_captions(video_id, query = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/list_captions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Video to Youtube — list_captions","text":"video_id ID YouTube video query Fields `query` `GET` ... Additional arguments send tuber_GET therefore GET","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_captions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload Video to Youtube — list_captions","text":"list response object GET content captions","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_captions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Video to Youtube — list_captions","text":"","code":"if (FALSE) { # \\dontrun{ video_id <- \"M7FIvfx5J10\" list_captions(video_id) } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_activities.html","id":null,"dir":"Reference","previous_headings":"","what":"List Channel Activity — list_channel_activities","title":"List Channel Activity — list_channel_activities","text":"Returns list channel events match request criteria.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_activities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Channel Activity — list_channel_activities","text":"","code":"list_channel_activities(   filter = NULL,   part = \"snippet\",   max_results = 50,   page_token = NULL,   published_after = NULL,   published_before = NULL,   region_code = NULL,   simplify = TRUE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_activities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Channel Activity — list_channel_activities","text":"filter string; Required. named vector length 1 potential names entry vector: channel_id: ID channel. Required. default. part specify part want. can one three: contentDetails, id, snippet. Default snippet. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger additional requests may increase API quota usage. page_token specific page result set returned, optional published_after Character. Optional. RFC 339 Format. instance, \"1970-01-01T00:00:00Z\" published_before Character. Optional. RFC 339 Format. instance, \"1970-01-01T00:00:00Z\" region_code ISO 3166-1 alpha-2 country code, optional, see also list_regions simplify Data Type: Boolean. Default TRUE. TRUE part requested contentDetails, function returns data.frame. Else list  information returned. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_activities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Channel Activity — list_channel_activities","text":"named list simplify TRUE, data.frame returned 18 columns: publishedAt, channelId, title, description, thumbnails.default.url, thumbnails.default.width, thumbnails.default.height, thumbnails.medium.url, thumbnails.medium.width, thumbnails.medium.height, thumbnails.high.url, thumbnails.high.width, thumbnails.high.height, thumbnails.standard.url, thumbnails.standard.width, thumbnails.standard.height, channelTitle, type","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_activities.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List Channel Activity — list_channel_activities","text":"https://developers.google.com/youtube/v3/docs/activities/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_activities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Channel Activity — list_channel_activities","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_channel_activities(filter = c(channel_id = \"UCRw8bIz2wMLmfgAgWm903cA\")) list_channel_activities(filter = c(channel_id = \"UCRw8bIz2wMLmfgAgWm903cA\", regionCode=\"US\")) list_channel_activities(filter = c(channel_id = \"UCMtFAi84ehTSYSE9XoHefig\"),                         published_before = \"2016-02-10T00:00:00Z\",                         published_after = \"2016-01-01T00:00:00Z\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_resources.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns List of Requested Channel Resources — list_channel_resources","title":"Returns List of Requested Channel Resources — list_channel_resources","text":"Returns List Requested Channel Resources","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_resources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns List of Requested Channel Resources — list_channel_resources","text":"","code":"list_channel_resources(   filter = NULL,   part = \"contentDetails\",   max_results = 50,   page_token = NULL,   hl = \"en-US\",   ... )"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_resources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns List of Requested Channel Resources — list_channel_resources","text":"filter string; Required. named vector single valid name potential names entry vector: category_id: YouTube guide category returns channels associated category username:  YouTube username returns channel associated  username. Multiple usernames can provided. channel_id: comma-separated list YouTube channel ID(s) resource(s) retrieved part comma-separated list channel resource properties response include string. Required. One following: auditDetails, brandingSettings, contentDetails, contentOwnerDetails, id, invideoPromotion, localizations, snippet, statistics, status, topicDetails. Default contentDetails. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger additional requests may increase API quota usage. page_token specific page result set returned, optional hl Language used text values. Optional. default en-US. allowed language codes, see list_langs. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_resources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns List of Requested Channel Resources — list_channel_resources","text":"list. username used filter,   data frame columns username channel_id returned.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_resources.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Returns List of Requested Channel Resources — list_channel_resources","text":"https://developers.google.com/youtube/v3/docs/channels/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_resources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns List of Requested Channel Resources — list_channel_resources","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_channel_resources(filter = c(channel_id = \"UCT5Cx1l4IS3wHkJXNyuj4TA\")) list_channel_resources(filter = c(username = \"latenight\"), part = \"id\") list_channel_resources(filter = c(username = c(\"latenight\", \"PBS\")),                        part = \"id\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_sections.html","id":null,"dir":"Reference","previous_headings":"","what":"List Channel Sections — list_channel_sections","title":"List Channel Sections — list_channel_sections","text":"Returns list channel sections channel id belongs .","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_sections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Channel Sections — list_channel_sections","text":"","code":"list_channel_sections(filter = NULL, part = \"snippet\", hl = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_sections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Channel Sections — list_channel_sections","text":"filter string; Required. named vector length 1 potential names entry vector: channel_id: Channel ID id: Section ID part specify part want. can one following: contentDetails, id, localizations, snippet, targeting. Default snippet. hl language used text values, optional, default en-US. See also list_langs ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_sections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Channel Sections — list_channel_sections","text":"captions video one first track","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_sections.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List Channel Sections — list_channel_sections","text":"https://developers.google.com/youtube/v3/docs/activities/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_sections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Channel Sections — list_channel_sections","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_channel_sections(c(channel_id = \"UCRw8bIz2wMLmfgAgWm903cA\")) } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_videos.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns List of Requested Channel Videos — list_channel_videos","title":"Returns List of Requested Channel Videos — list_channel_videos","text":"Iterate max_results number playlists channel get videos playlists.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_videos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns List of Requested Channel Videos — list_channel_videos","text":"","code":"list_channel_videos(   channel_id = NULL,   max_results = 50,   page_token = NULL,   hl = \"en-US\",   ... )"},{"path":"https://soodoku.github.io/tuber/reference/list_channel_videos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns List of Requested Channel Videos — list_channel_videos","text":"channel_id String. ID channel. Required. max_results Maximum number videos returned. Integer. Default 50. number 50, videos returned. page_token Specific page result set returned. Optional. hl Language used text values. Optional. Default en-US. allowed language codes, see list_langs ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_videos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns List of Requested Channel Videos — list_channel_videos","text":"list data.frame list corresponding different playlist","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_videos.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Returns List of Requested Channel Videos — list_channel_videos","text":"https://developers.google.com/youtube/v3/docs/channels/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_channel_videos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns List of Requested Channel Videos — list_channel_videos","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_channel_videos(channel_id = \"UCXOKEdfOFxsHO_-Su3K8SHg\") list_channel_videos(channel_id = \"UCXOKEdfOFxsHO_-Su3K8SHg\", max_results = 10) } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_guidecats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of categories that can be associated with YouTube channels — list_guidecats","title":"Get list of categories that can be associated with YouTube channels — list_guidecats","text":"Get list categories can associated YouTube channels","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_guidecats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of categories that can be associated with YouTube channels — list_guidecats","text":"","code":"list_guidecats(filter = NULL, hl = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/list_guidecats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get list of categories that can be associated with YouTube channels — list_guidecats","text":"filter string; Required. named vector length 1 potential names entry vector: region_code: Character. Required. ISO 3166-1 alpha-2 code  (see https://www.iso.org/obp/ui/#search) category_id: YouTube channel category ID hl Language used text values. Optional. Default en-US. allowed language codes, see list_langs. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_guidecats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of categories that can be associated with YouTube channels — list_guidecats","text":"data.frame 5 columns: region_code, channelId, title, etag, id","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_guidecats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Get list of categories that can be associated with YouTube channels — list_guidecats","text":"https://developers.google.com/youtube/v3/docs/guideCategories/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_guidecats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of categories that can be associated with YouTube channels — list_guidecats","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_guidecats(c(region_code = \"JP\")) } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_langs.html","id":null,"dir":"Reference","previous_headings":"","what":"List Languages That YouTube Currently Supports — list_langs","title":"List Languages That YouTube Currently Supports — list_langs","text":"List Languages YouTube Currently Supports","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_langs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Languages That YouTube Currently Supports — list_langs","text":"","code":"list_langs(hl = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/list_langs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Languages That YouTube Currently Supports — list_langs","text":"hl Language used text values. Optional. Default en-US. allowed language codes, see list_langs. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_langs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Languages That YouTube Currently Supports — list_langs","text":"data.frame 3 columns: hl (two letter abbreviation), name (language), etag","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_langs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List Languages That YouTube Currently Supports — list_langs","text":"https://developers.google.com/youtube/v3/docs/i18nLanguages/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_langs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Languages That YouTube Currently Supports — list_langs","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_langs() } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_my_videos.html","id":null,"dir":"Reference","previous_headings":"","what":"List My videos — list_my_videos","title":"List My videos — list_my_videos","text":"List videos","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_my_videos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List My videos — list_my_videos","text":"","code":"list_my_videos(...)"},{"path":"https://soodoku.github.io/tuber/reference/list_my_videos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List My videos — list_my_videos","text":"... additional arguments pass list_channel_videos","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_my_videos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List My videos — list_my_videos","text":"data.frame list corresponding different playlist","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_my_videos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List My videos — list_my_videos","text":"","code":"if (FALSE) { # \\dontrun{   list_my_videos() } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"List Content Regions That YouTube Currently Supports — list_regions","title":"List Content Regions That YouTube Currently Supports — list_regions","text":"List Content Regions YouTube Currently Supports","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Content Regions That YouTube Currently Supports — list_regions","text":"","code":"list_regions(hl = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/list_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Content Regions That YouTube Currently Supports — list_regions","text":"hl Language used text values. Optional. Default en-US. allowed language codes, see list_langs. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Content Regions That YouTube Currently Supports — list_regions","text":"data.frame 3 columns: gl (two letter abbreviation), name (region), etag","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_regions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List Content Regions That YouTube Currently Supports — list_regions","text":"https://developers.google.com/youtube/v3/docs/i18nRegions/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_regions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Content Regions That YouTube Currently Supports — list_regions","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_regions() } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_videocats.html","id":null,"dir":"Reference","previous_headings":"","what":"List of Categories That Can be Associated with Videos — list_videocats","title":"List of Categories That Can be Associated with Videos — list_videocats","text":"List Categories Can Associated Videos","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videocats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of Categories That Can be Associated with Videos — list_videocats","text":"","code":"list_videocats(filter = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/list_videocats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of Categories That Can be Associated with Videos — list_videocats","text":"filter string; Required. named vector length 1 potential names entry vector: region_code: Character. Required. ISO 3166-1 alpha-2 code (see https://www.iso.org/obp/ui/#search) category_id: video category ID ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videocats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of Categories That Can be Associated with Videos — list_videocats","text":"data.frame 6 columns: region_code, channelId, title, assignable, etag, id","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videocats.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List of Categories That Can be Associated with Videos — list_videocats","text":"https://developers.google.com/youtube/v3/docs/videoCategories/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videocats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of Categories That Can be Associated with Videos — list_videocats","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_videocats(c(region_code = \"JP\")) list_videocats() # Will throw an error asking for a valid filter with valid region_code } # }"},{"path":"https://soodoku.github.io/tuber/reference/list_videos.html","id":null,"dir":"Reference","previous_headings":"","what":"List (Most Popular) Videos — list_videos","title":"List (Most Popular) Videos — list_videos","text":"List (Popular) Videos","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List (Most Popular) Videos — list_videos","text":"","code":"list_videos(   part = \"contentDetails\",   max_results = 50,   page_token = NULL,   hl = NULL,   region_code = NULL,   video_category_id = NULL,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/list_videos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List (Most Popular) Videos — list_videos","text":"part Required. Comma separated string including one following: contentDetails, fileDetails, id, liveStreamingDetails, localizations, player, processingDetails, recordingDetails, snippet, statistics, status, suggestions, topicDetails. Default: contentDetails. max_results Maximum number items returned. Integer. Optional. Default 50. Values 50 trigger multiple requests may use additional API quota. page_token specific page result set returned, optional hl Language used text values. Optional. Default en-US. allowed language codes, see list_langs. region_code Character. Required. ISO 3166-1 alpha-2 code (see https://www.iso.org/obp/ui/#search). video_category_id video category chart retrieved. See also list_videocats. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List (Most Popular) Videos — list_videos","text":"data.frame 5 columns: channelId, title, assignable, etag, id","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videos.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List (Most Popular) Videos — list_videos","text":"https://developers.google.com/youtube/v3/docs/search/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/list_videos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List (Most Popular) Videos — list_videos","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  list_videos() } # }"},{"path":"https://soodoku.github.io/tuber/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://soodoku.github.io/tuber/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://soodoku.github.io/tuber/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://soodoku.github.io/tuber/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://soodoku.github.io/tuber/reference/process_youtube_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Unicode Handling to YouTube API Response — process_youtube_text","title":"Apply Unicode Handling to YouTube API Response — process_youtube_text","text":"Applies consistent Unicode handling common YouTube API response fields","code":""},{"path":"https://soodoku.github.io/tuber/reference/process_youtube_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Unicode Handling to YouTube API Response — process_youtube_text","text":"","code":"process_youtube_text(   response,   text_fields = c(\"title\", \"description\", \"textDisplay\", \"textOriginal\", \"channelTitle\",     \"authorDisplayName\", \"categoryId\") )"},{"path":"https://soodoku.github.io/tuber/reference/process_youtube_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Unicode Handling to YouTube API Response — process_youtube_text","text":"response List data.frame containing YouTube API response data text_fields Character vector field names process. Default: common YouTube text fields","code":""},{"path":"https://soodoku.github.io/tuber/reference/process_youtube_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Unicode Handling to YouTube API Response — process_youtube_text","text":"Processed response proper Unicode handling","code":""},{"path":"https://soodoku.github.io/tuber/reference/quota_management.html","id":null,"dir":"Reference","previous_headings":"","what":"YouTube API Quota Management — quota_management","title":"YouTube API Quota Management — quota_management","text":"Functions track manage YouTube API quota usage","code":""},{"path":"https://soodoku.github.io/tuber/reference/read_sbv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SBV file — read_sbv","title":"Read SBV file — read_sbv","text":"Read SBV file","code":""},{"path":"https://soodoku.github.io/tuber/reference/read_sbv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SBV file — read_sbv","text":"","code":"read_sbv(file)"},{"path":"https://soodoku.github.io/tuber/reference/read_sbv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SBV file — read_sbv","text":"file file name sbv file","code":""},{"path":"https://soodoku.github.io/tuber/reference/read_sbv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read SBV file — read_sbv","text":"data.frame start/stop times text","code":""},{"path":"https://soodoku.github.io/tuber/reference/read_sbv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read SBV file — read_sbv","text":"","code":"if (yt_authorized()){ vids <- list_my_videos() res <- list_caption_tracks(video_id = vids$contentDetails.videoId[1]) cap <- get_captions(id = res$id, as_raw = FALSE) tfile <- tempfile(fileext = \".sbv\") writeLines(cap, tfile) x <- read_sbv(tfile) if (requireNamespace(\"hms\", quietly = TRUE)) {   x$start <- hms::as_hms(x$start)   x$stop <- hms::as_hms(x$stop) } }"},{"path":"https://soodoku.github.io/tuber/reference/safe_utf8.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely Convert Text to UTF-8 — safe_utf8","title":"Safely Convert Text to UTF-8 — safe_utf8","text":"Ensures text fields properly encoded UTF-8","code":""},{"path":"https://soodoku.github.io/tuber/reference/safe_utf8.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely Convert Text to UTF-8 — safe_utf8","text":"","code":"safe_utf8(text, fallback_encoding = \"latin1\")"},{"path":"https://soodoku.github.io/tuber/reference/safe_utf8.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely Convert Text to UTF-8 — safe_utf8","text":"text Character vector list text convert fallback_encoding Character. Encoding assume detection fails. Default: \"latin1\"","code":""},{"path":"https://soodoku.github.io/tuber/reference/safe_utf8.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely Convert Text to UTF-8 — safe_utf8","text":"Character vector UTF-8 encoding","code":""},{"path":"https://soodoku.github.io/tuber/reference/track_quota_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Track Quota Usage — track_quota_usage","title":"Track Quota Usage — track_quota_usage","text":"Internal function track API usage","code":""},{"path":"https://soodoku.github.io/tuber/reference/track_quota_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Track Quota Usage — track_quota_usage","text":"","code":"track_quota_usage(endpoint, parts = NULL, additional_cost = 0)"},{"path":"https://soodoku.github.io/tuber/reference/track_quota_usage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Track Quota Usage — track_quota_usage","text":"endpoint Character. API endpoint name parts Character vector. Parts requested additional_cost Integer. Additional cost complex operations","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tuber: Client for the YouTube API — tuber-package","title":"tuber: Client for the YouTube API — tuber-package","text":"Get comments posted YouTube videos, information many times video liked, search videos particular content, much . can also scrape captions videos. learn YouTube API, see https://developers.google.com/youtube/v3/.","code":""},{"path":[]},{"path":"https://soodoku.github.io/tuber/reference/tuber-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tuber: Client for the YouTube API — tuber-package","text":"Maintainer: Gaurav Sood gsood07@gmail.com contributors: Kate Lyons k.lyons7@gmail.com [contributor] John Muschelli muschellij2@gmail.com [contributor]","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber.html","id":null,"dir":"Reference","previous_headings":"","what":"tuber provides access to the YouTube API V3. — tuber","title":"tuber provides access to the YouTube API V3. — tuber","text":"tuber provides access YouTube API V3 via RESTful calls.","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_DELETE.html","id":null,"dir":"Reference","previous_headings":"","what":"DELETE — tuber_DELETE","title":"DELETE — tuber_DELETE","text":"DELETE","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_DELETE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DELETE — tuber_DELETE","text":"","code":"tuber_DELETE(path, query, ...)"},{"path":"https://soodoku.github.io/tuber/reference/tuber_DELETE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DELETE — tuber_DELETE","text":"path path specific API request URL query query list ... Additional arguments passed GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_DELETE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DELETE — tuber_DELETE","text":"list","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_GET.html","id":null,"dir":"Reference","previous_headings":"","what":"GET — tuber_GET","title":"GET — tuber_GET","text":"GET","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_GET.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET — tuber_GET","text":"","code":"tuber_GET(path, query, auth = \"token\", ...)"},{"path":"https://soodoku.github.io/tuber/reference/tuber_GET.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET — tuber_GET","text":"path path specific API request URL query query list auth character vector authentication method, either \"token\" (default) \"key\" ... Additional arguments passed GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_GET.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET — tuber_GET","text":"list","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST.html","id":null,"dir":"Reference","previous_headings":"","what":"POST — tuber_POST","title":"POST — tuber_POST","text":"POST","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POST — tuber_POST","text":"","code":"tuber_POST(path, query, body = \"\", ...)"},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POST — tuber_POST","text":"path path specific API request URL query query list body passing image body ... Additional arguments passed GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POST — tuber_POST","text":"list","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST_json.html","id":null,"dir":"Reference","previous_headings":"","what":"POST encoded in json — tuber_POST_json","title":"POST encoded in json — tuber_POST_json","text":"POST encoded json","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"POST encoded in json — tuber_POST_json","text":"","code":"tuber_POST_json(path, query, body = \"\", ...)"},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"POST encoded in json — tuber_POST_json","text":"path path specific API request URL query query list body passing image body ... Additional arguments passed GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_POST_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"POST encoded in json — tuber_POST_json","text":"list","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Request Response Verification — tuber_check","title":"Request Response Verification — tuber_check","text":"Request Response Verification","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Request Response Verification — tuber_check","text":"","code":"tuber_check(req)"},{"path":"https://soodoku.github.io/tuber/reference/tuber_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Request Response Verification — tuber_check","text":"req request","code":""},{"path":"https://soodoku.github.io/tuber/reference/tuber_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Request Response Verification — tuber_check","text":"case failure, message","code":""},{"path":"https://soodoku.github.io/tuber/reference/unicode_utils.html","id":null,"dir":"Reference","previous_headings":"","what":"Unicode and Text Processing Utilities — unicode_utils","title":"Unicode and Text Processing Utilities — unicode_utils","text":"Internal functions consistent text Unicode handling across tuber","code":""},{"path":"https://soodoku.github.io/tuber/reference/update_video_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a YouTube Video's Metadata — update_video_metadata","title":"Update a YouTube Video's Metadata — update_video_metadata","text":"function updates metadata existing YouTube video using YouTube Data API.","code":""},{"path":"https://soodoku.github.io/tuber/reference/update_video_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a YouTube Video's Metadata — update_video_metadata","text":"","code":"update_video_metadata(   video_id,   title,   category_id,   description,   privacy_status,   made_for_kids )"},{"path":"https://soodoku.github.io/tuber/reference/update_video_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a YouTube Video's Metadata — update_video_metadata","text":"video_id character string specifying ID video want update. title character string specifying new title video. category_id character string specifying new category ID video. description character string specifying new description video. privacy_status character string specifying new privacy status video ('public', 'private', 'unlisted'). made_for_kids boolean specifying whether video self-declared made kids.","code":""},{"path":"https://soodoku.github.io/tuber/reference/update_video_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a YouTube Video's Metadata — update_video_metadata","text":"list containing server response update attempt.","code":""},{"path":"https://soodoku.github.io/tuber/reference/update_video_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a YouTube Video's Metadata — update_video_metadata","text":"","code":"if (FALSE) { # \\dontrun{ update_video_metadata(video_id = \"YourVideoID\",                       title = \"New Video Title\",                       category_id = \"24\",                       description = \"New Description\",                       privacy_status = \"public\",                       made_for_kids = FALSE) } # }"},{"path":"https://soodoku.github.io/tuber/reference/upload_caption.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Video Caption to Youtube — upload_caption","title":"Upload Video Caption to Youtube — upload_caption","text":"Upload Video Caption Youtube","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_caption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Video Caption to Youtube — upload_caption","text":"","code":"upload_caption(   file,   video_id,   language = \"en-US\",   caption_name,   is_draft = FALSE,   query = NULL,   open_url = FALSE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/upload_caption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Video Caption to Youtube — upload_caption","text":"file Filename caption, probably `.srt` video_id YouTube Video ID.  Try list_my_videos examples. language character string `BCP47` language type. See https://www.rfc-editor.org/rfc/bcp/bcp47.txt language specification caption_name character vector name caption. is_draft logical indicating whether caption track draft. query Fields `query` `POST` open_url video opened using browseURL ... Additional arguments send POST","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_caption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload Video Caption to Youtube — upload_caption","text":"list response object POST, content, URL video","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_caption.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Upload Video Caption to Youtube — upload_caption","text":"See https://developers.google.com/youtube/v3/docs/captions#resource full specification","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_caption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Video Caption to Youtube — upload_caption","text":"","code":"if (FALSE) { # \\dontrun{ xx = list_my_videos() video_id = xx$contentDetails.videoId[1] video_id = as.character(video_id) language = \"en-US\" } # }"},{"path":"https://soodoku.github.io/tuber/reference/upload_video.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload Video to Youtube — upload_video","title":"Upload Video to Youtube — upload_video","text":"Upload Video Youtube","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_video.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload Video to Youtube — upload_video","text":"","code":"upload_video(   file,   snippet = NULL,   status = list(privacyStatus = \"public\"),   query = NULL,   open_url = FALSE,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/upload_video.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload Video to Youtube — upload_video","text":"file Filename video locally snippet Additional fields video, including `description` `title`.  See https://developers.google.com/youtube/v3/docs/videos#resource fields.  Coerced JSON object status Additional fields put status input. options `status` `license` (hold: `creativeCommon`, `youtube`), `privacyStatus`, `publicStatsViewable`, `publishAt`. query Fields `query` `POST` open_url video opened using browseURL ... Additional arguments send tuber_POST therefore POST","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_video.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload Video to Youtube — upload_video","text":"list response object POST, content, URL uploaded","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_video.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Upload Video to Youtube — upload_video","text":"information `status` `snippet` https://developers.google.com/youtube/v3/docs/videos#resource subset fields pass located : https://developers.google.com/youtube/v3/docs/videos/insert `part“ parameter serves two purposes operation. identifies properties write operation set, automatically detected names `body`. See https://developers.google.com/youtube/v3/docs/videos/insert#usage","code":""},{"path":"https://soodoku.github.io/tuber/reference/upload_video.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Upload Video to Youtube — upload_video","text":"","code":"snippet = list( title = \"Test Video\", description = \"This is just a random test.\", tags = c(\"r language\", \"r programming\", \"data analysis\") ) status = list(privacyStatus = \"private\")"},{"path":"https://soodoku.github.io/tuber/reference/yt_get_quota_usage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Current Quota Usage — yt_get_quota_usage","title":"Get Current Quota Usage — yt_get_quota_usage","text":"Returns current estimated quota usage day","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_get_quota_usage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Current Quota Usage — yt_get_quota_usage","text":"","code":"yt_get_quota_usage()"},{"path":"https://soodoku.github.io/tuber/reference/yt_get_quota_usage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Current Quota Usage — yt_get_quota_usage","text":"List quota_used, quota_limit, quota_remaining, reset_time","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_get_quota_usage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Current Quota Usage — yt_get_quota_usage","text":"","code":"if (FALSE) { # \\dontrun{ quota_status <- yt_get_quota_usage() cat(\"Used:\", quota_status$quota_used, \"/\", quota_status$quota_limit) } # }"},{"path":"https://soodoku.github.io/tuber/reference/yt_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage YouTube API key — yt_key","title":"Manage YouTube API key — yt_key","text":"functions manage YouTube API key package key .Renviron.","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage YouTube API key — yt_key","text":"","code":"yt_get_key(decrypt = FALSE) yt_set_key(key, type)"},{"path":"https://soodoku.github.io/tuber/reference/yt_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage YouTube API key — yt_key","text":"decrypt boolean vector specifying whether decrypt supplied key `httr2::secret_decrypt()`. Defaults `FALSE`. `TRUE`, requires environment variable `TUBER_KEY` set `.Renviron`. key character vector specifying YouTube API key. type character vector specifying type API key set. One 'api' (default, stored `YOUTUBE_KEY`) 'package'. Package keys stored `TUBER_KEY` used decrypt API keys, use continuous integration testing.","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage YouTube API key — yt_key","text":"`yt_get_key()` returns character vector YouTube API key stored `.Renviron`. value stored `.Renviron`, functions return `NULL`. `type` argument set 'api', `yt_set_key()` assigns YouTube API key `YOUTUBE_KEY` `.Renviron` invisibly returns `NULL`. `type` argument set 'package', `yt_set_key()` assigns package key `TUBER_KEY` `.Renviron` invisibly returns `NULL`.","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage YouTube API key — yt_key","text":"","code":"if (FALSE) { # \\dontrun{ ## for interactive use yt_get_key()  list_channel_videos(   channel_id = \"UCDgj5-mFohWZ5irWSFMFcng\",   max_results = 3,   part = \"snippet\",   auth = \"key\" )  ## for continuous integration and testing yt_set_key(httr2::secret_make_key(), type = \"package\") x <- httr2::secret_encrypt(\"YOUR_YOUTUBE_API_KEY\", \"TUBER_KEY\") yt_set_key(x, type = \"api\") yt_get_key(decrypt = TRUE)  list_channel_videos(   channel_id = \"UCDgj5-mFohWZ5irWSFMFcng\",   max_results = 3,   part = \"snippet\",   auth = \"key\" ) } # }"},{"path":"https://soodoku.github.io/tuber/reference/yt_oauth.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up Authorization — yt_oauth","title":"Set up Authorization — yt_oauth","text":"function looks .httr-oauth working directory. find , expects application ID secret. want remove existing .httr-oauth, set remove_old_oauth TRUE. default, set FALSE. function launches browser allow authorize application","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_oauth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up Authorization — yt_oauth","text":"","code":"yt_oauth(   app_id = NULL,   app_secret = NULL,   scope = \"ssl\",   token = \".httr-oauth\",   ... )"},{"path":"https://soodoku.github.io/tuber/reference/yt_oauth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up Authorization — yt_oauth","text":"app_id client id; required; default app_secret client secret; required; default scope Character. ssl, basic, own_account_readonly, upload_and_manage_own_videos, partner, partner_audit. Required. ssl basic basically interchangeable. Default ssl. token path file containing token. path given, function first try read . Default .httr-oauth local directory. file, function first try read . ... Additional arguments passed oauth2.0_token","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_oauth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up Authorization — yt_oauth","text":"sets google_token option also saves .httr_oauth working directory (find working directory via getwd())","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_oauth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set up Authorization — yt_oauth","text":"browser opened, pass use_oob = TRUE yt_oauth() authentication can completed using --band code. Delete .httr-oauth file working directory force re-authentication.","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_oauth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set up Authorization — yt_oauth","text":"https://developers.google.com/youtube/v3/docs/ https://developers.google.com/youtube/v3/guides/auth/client-side-web-apps different scopes","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_oauth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set up Authorization — yt_oauth","text":"","code":"if (FALSE) { # \\dontrun{ yt_oauth(paste0(\"998136489867-5t3tq1g7hbovoj46dreqd6k5kd35ctjn\",                 \".apps.googleusercontent.com\"),          \"MbOSt6cQhhFkwETXKur-L9rN\") } # }"},{"path":"https://soodoku.github.io/tuber/reference/yt_reset_quota.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset Quota Counter — yt_reset_quota","title":"Reset Quota Counter — yt_reset_quota","text":"Reset quota counter (typically done automatically midnight UTC)","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_reset_quota.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset Quota Counter — yt_reset_quota","text":"","code":"yt_reset_quota()"},{"path":"https://soodoku.github.io/tuber/reference/yt_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search YouTube — yt_search","title":"Search YouTube — yt_search","text":"Search videos, channels playlists. (default, function searches videos.)","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search YouTube — yt_search","text":"","code":"yt_search(   term = NULL,   max_results = 50,   channel_id = NULL,   channel_type = NULL,   type = \"video\",   event_type = NULL,   location = NULL,   location_radius = NULL,   published_after = NULL,   published_before = NULL,   video_definition = \"any\",   video_caption = \"any\",   video_license = \"any\",   video_syndicated = \"any\",   region_code = NULL,   relevance_language = \"en\",   video_type = \"any\",   simplify = TRUE,   get_all = TRUE,   page_token = NULL,   max_pages = Inf,   ... )"},{"path":"https://soodoku.github.io/tuber/reference/yt_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search YouTube — yt_search","text":"term Character. Search term; required; default using Boolean operators, see API documentation. relevant information: \"request can also use Boolean (-) (|) operators exclude videos find videos associated one several search terms. example, search videos matching either \"boating\" \"sailing\", set q parameter value boating|sailing. Similarly, search videos matching either \"boating\" \"sailing\" \"fishing\", set q parameter value boating|sailing -fishing\" max_results Maximum number items returned total. Integer. Optional. Can 1 500. Default 50. get_all = TRUE, multiple API calls made many results collected (subject YouTube limits). Requesting large number results consume API quota. Search results constrained maximum 500 videos type video value channel_id. channel_id Character. return search results channel; Optional. channel_type Character. Optional. Takes one two values: '', 'show'. Default '' type Character. Optional. Takes one three values: 'video', 'channel', 'playlist'. Default 'video'. event_type Character. Optional. Takes one three values: 'completed', 'live', 'upcoming' location Character.  Optional. Latitude Longitude within parentheses, e.g. \"(37.42307,-122.08427)\" location_radius Character.  Optional. e.g. \"1500m\", \"5km\", \"10000ft\", \"0.75mi\" published_after Character. Optional. RFC 339 Format. instance, \"1970-01-01T00:00:00Z\" published_before Character. Optional. RFC 339 Format. instance, \"1970-01-01T00:00:00Z\" video_definition Character. Optional. Takes one three values: '' (return videos; Default), 'high', 'standard' video_caption Character. Optional. Takes one three values: '' (return videos; Default), 'closedCaption', 'none'. Type must set video. video_license Character. Optional. Takes one three values: '' (return videos; Default), 'creativeCommon' (return videos Creative Commons license), 'youtube' (return videos standard YouTube license). video_syndicated Character. Optional. Takes one two values: '' (return videos; Default), 'true' (return syndicated videos) region_code Character. Required. ISO 3166-1 alpha-2 code (see https://www.iso.org/obp/ui/#search). relevance_language Character. Optional. relevance_language argument instructs API return search results relevant specified language. parameter value typically ISO 639-1 two-letter language code. However, use values zh-Hans simplified Chinese zh-Hant traditional Chinese. Please note results languages still returned highly relevant search query term. video_type Character. Optional. Takes one three values: '' (return videos; Default), 'episode' (return episode shows), 'movie' (return movies) simplify Boolean. Return data.frame TRUE. Default TRUE. TRUE, returns list carries additional information. get_all get results, iterating results pages. Default TRUE. Result data.frame. Optional. page_token specific page result set returned, optional max_pages Maximum number pages retrieve get_all TRUE. Default Inf (page limit). Setting lower value can reduce API quota usage. ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search YouTube — yt_search","text":"data.frame 16 elements: video_id, publishedAt, channelId, title, description, thumbnails.default.url, thumbnails.default.width, thumbnails.default.height, thumbnails.medium.url, thumbnails.medium.width, thumbnails.medium.height, thumbnails.high.url, thumbnails.high.width, thumbnails.high.height, channelTitle, liveBroadcastContent returned data.frame also following attributes: total_results: total number results reported API actual_results: actual number rows returned api_limit_reached: Whether YouTube API result limit reached","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search YouTube — yt_search","text":"https://developers.google.com/youtube/v3/docs/search/list","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search YouTube — yt_search","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  yt_search(term = \"Barack Obama\") yt_search(term = \"Barack Obama\", published_after = \"2016-10-01T00:00:00Z\") yt_search(term = \"Barack Obama\", published_before = \"2016-09-01T00:00:00Z\") yt_search(term = \"Barack Obama\", published_before = \"2016-03-01T00:00:00Z\",                                published_after = \"2016-02-01T00:00:00Z\") yt_search(term = \"Barack Obama\", published_before = \"2016-02-10T00:00:00Z\",                                published_after = \"2016-01-01T00:00:00Z\")  # To check how many results were found vs. how many were returned: results <- yt_search(term = \"drone videos\") attr(results, \"total_results\")  # Total number reported by YouTube attr(results, \"actual_results\") # Number actually returned attr(results, \"api_limit_reached\") # Whether API limit was reached } # }"},{"path":"https://soodoku.github.io/tuber/reference/yt_set_quota_limit.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Quota Limit — yt_set_quota_limit","title":"Set Quota Limit — yt_set_quota_limit","text":"Set daily quota limit (default 10,000 units)","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_set_quota_limit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Quota Limit — yt_set_quota_limit","text":"","code":"yt_set_quota_limit(limit)"},{"path":"https://soodoku.github.io/tuber/reference/yt_set_quota_limit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Quota Limit — yt_set_quota_limit","text":"limit Integer. Daily quota limit units","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_set_quota_limit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Quota Limit — yt_set_quota_limit","text":"","code":"if (FALSE) { # \\dontrun{ # If you have a higher quota limit yt_set_quota_limit(50000) } # }"},{"path":"https://soodoku.github.io/tuber/reference/yt_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if authentication token is in options — yt_token","title":"Check if authentication token is in options — yt_token","text":"Check authentication token options","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if authentication token is in options — yt_token","text":"","code":"yt_token()  yt_authorized()  yt_check_token()"},{"path":"https://soodoku.github.io/tuber/reference/yt_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if authentication token is in options — yt_token","text":"Token2.0 class","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_topic_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search YouTube by Topic It uses the Freebase list of topics — yt_topic_search","title":"Search YouTube by Topic It uses the Freebase list of topics — yt_topic_search","text":"Search YouTube Topic uses Freebase list topics","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_topic_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search YouTube by Topic It uses the Freebase list of topics — yt_topic_search","text":"","code":"yt_topic_search(topic = NULL, ...)"},{"path":"https://soodoku.github.io/tuber/reference/yt_topic_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search YouTube by Topic It uses the Freebase list of topics — yt_topic_search","text":"topic topic searched ; required; default ... Additional arguments passed tuber_GET.","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_topic_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search YouTube by Topic It uses the Freebase list of topics — yt_topic_search","text":"list","code":""},{"path":"https://soodoku.github.io/tuber/reference/yt_topic_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search YouTube by Topic It uses the Freebase list of topics — yt_topic_search","text":"","code":"if (FALSE) { # \\dontrun{  # Set API token via yt_oauth() first  yt_topic_search(topic = \"Barack Obama\") } # }"},{"path":[]},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"major-bug-fixes-and-performance-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"Major Bug Fixes and Performance Improvements","title":"version 1.1.0","text":"release fixes critical issues causing package unreliable production use:","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"critical-fixes-1-1-0","dir":"Changelog","previous_headings":"Major Bug Fixes and Performance Improvements","what":"Critical Fixes","title":"version 1.1.0","text":"BREAKING BUG: Fixed OAuth token caching - authentication completely broken (issues #135, #107, #64) PERFORMANCE: Fixed O(n²) pagination get_all_comments() - now scales linearly (issues #62, #111, #115) RELIABILITY: Fixed username lookup failures list_channel_resources() retry logic (issue #73) ERROR HANDLING: Added proper validation videos disabled/comments (issue #115)","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"high-priority-improvements-1-1-0","dir":"Changelog","previous_headings":"Major Bug Fixes and Performance Improvements","what":"High-Priority Improvements","title":"version 1.1.0","text":"Added yt_get_quota_usage(), yt_set_quota_limit(), yt_reset_quota() functions Automatic quota usage tracking warnings limits reached Rate limiting detection management PERFORMANCE: Optimized yt_search() stop fetching max_results reached (issues #66, #77) BATCH API CALLS: Rewrote get_all_channel_video_stats() use batch requests (50x fewer API calls) Proper validation UC/UU channel IDs API-based fallback brand channels custom URLs Clear error messages unsupported channel types UNICODE HANDLING: Standardized UTF-8 processing across functions (issue #80) ERROR HANDLING: Improved contentDetails processing proper null checks (issue #79)","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"Major Bug Fixes and Performance Improvements","what":"New Features","title":"version 1.1.0","text":"Added comprehensive quota management system Added retry logic exponential backoff intermittent API failures Added progress indicators long-running operations Added detailed error messages explaining common failure scenarios","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"performance-improvements-1-1-0","dir":"Changelog","previous_headings":"Major Bug Fixes and Performance Improvements","what":"Performance Improvements","title":"version 1.1.0","text":"get_all_comments(): ~100x faster videos many comments yt_search(): ~50% quota savings precise result fetching get_all_channel_video_stats(): 50x fewer API calls batching list_channel_resources(): ~95% reliability improvement retry logic","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-101","dir":"Changelog","previous_headings":"","what":"version 1.0.1","title":"version 1.0.1","text":"CRAN release: 2025-04-01 Fixed cross-ref checks","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-0999000-development-version","dir":"Changelog","previous_headings":"","what":"version 0.9.9.9000 (development version)","title":"version 0.9.9.9000 (development version)","text":"Added support API key authentication two new exported functions, yt_get_key() yt_set_key(), new auth argument internal function tuber_GET(). Users can now pass auth = \"key\" function uses tuber_GET() enable API key authentication. behavior tuber_GET() remains unchanged using new default, auth = \"token\", avoids breaking changes previously written code (@gvelasq, #117).","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-099","dir":"Changelog","previous_headings":"","what":"version 0.9.9","title":"version 0.9.9","text":"CRAN release: 2020-06-11 added functionality like upload_video etc. see https://github.com/soodoku/tuber/commit/2cf53c50e9079af0f6b1a478698d0bda15f4c5e0 bug fix: https://github.com/soodoku/tuber/commit/c1d6d82fe9334bb1aecbeb006521dcf99f803a88","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-098","dir":"Changelog","previous_headings":"","what":"version 0.9.8","title":"version 0.9.8","text":"CRAN release: 2019-06-26 allows caption uploading list_my_videos list_captions","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-096","dir":"Changelog","previous_headings":"","what":"version 0.9.6","title":"version 0.9.6","text":"default mine changed NULL FALSE thank advice Miguel Arribas","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-095","dir":"Changelog","previous_headings":"","what":"version 0.9.5","title":"version 0.9.5","text":"CRAN release: 2018-03-01 add util functions getting details videos channel mine = TRUE","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-094","dir":"Changelog","previous_headings":"","what":"version 0.9.4","title":"version 0.9.4","text":"CRAN release: 2018-02-13 fix bug(s) get_all_comments","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-093","dir":"Changelog","previous_headings":"","what":"version 0.9.3","title":"version 0.9.3","text":"CRAN release: 2018-02-03 new vignette tuber shows deal emojis tuber new function fetching comments, including replies. Also fixes #43 Added missing partner scope fixing #41. New pkgdown documentation released functions organized purpose. get_related_videos returns related video id addition cols.","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-092","dir":"Changelog","previous_headings":"","what":"version 0.9.2","title":"version 0.9.2","text":"CRAN release: 2017-11-19 fixes list_channel_videos. used iterate playlists. don’t need . uploaded videos channel available playlist id channel id except first two letters switched. fixes get_playlist_items. thanks @TebanSierra. See #39.","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-091","dir":"Changelog","previous_headings":"","what":"version 0.9.1","title":"version 0.9.1","text":"CRAN release: 2017-09-20 get_video_detail doesn’t hardcode part = ‘snippet’. get_playlists trying argument matching w/ part can comma separated list. obviously failed big time. Fixed now.","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-090","dir":"Changelog","previous_headings":"","what":"version 0.9.0","title":"version 0.9.0","text":"CRAN release: 2017-05-28 Extensive linting. Passes expect_lint_free Removed support caption tracks old Youtube API client V3. Changed get_captions API. support deletes translate_filter get_comment_threads also supports pagetoken, didn’t. removes cats (prints) get_stats based user feedback list_channel_videos now supports getting videos playlists get_playlist_items supports simplify, defaults simplify, also allows getting videos playlist easily. get_comment_threads allows getting comment_threads","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-080","dir":"Changelog","previous_headings":"","what":"version 0.8.0","title":"version 0.8.0","text":"CRAN release: 2017-04-11 get_all — iterate results get supported various functions. supported yt_search(). prints removed yt_search() yt_search() returns data.frame video_id simplify TRUE resource particular ID found, functions now issue warning() rather ‘cat’ problem.","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-070","dir":"Changelog","previous_headings":"","what":"version 0.7.0","title":"version 0.7.0","text":"CRAN release: 2016-11-21 invisible return Rather .null checks, !.character checks args expected chars using ldly robust rbind data.frames get_playlists now supports simplify — allows data.frame return consistent return get_related_videos() — df cols. even results. list_guidecats() list_videocats() now return region_code part returned data.frame return simplify TRUE yt_search() now gives data.frame 15 columns nicer return documentation list_channel_activities() better documentation get_playlists() fixed bug list_abuse_report_reasons() part snippet","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-060","dir":"Changelog","previous_headings":"","what":"version 0.6.0","title":"version 0.6.0","text":"CRAN release: 2016-11-11 Based CRAN feedback, add comment yt_outh man pages video_id returned part list get_stats, get_video_details handles errors stemming bad video id get_stats, get_video_details fixed bug get_comment delivers separate results diff. filters, error handling bad comment_id, now comment_id returned part df better returns simplify TRUE get_related_videos, get_comment_threads list_caption_tracks function added. updated get_captions return caption related particular caption_id video_id","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-050","dir":"Changelog","previous_headings":"","what":"version 0.5.0","title":"version 0.5.0","text":"Added contributor code conduct yt_search takes new argument simplify TRUE returns dataframe 7 elements. Otherwise returns list information.","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-040-2016-10-04","dir":"Changelog","previous_headings":"","what":"version 0.4.0 2016-10-04","title":"version 0.4.0 2016-10-04","text":"CRAN release: 2016-10-04 Filtering different facets now supported. via passing named vector. Added function list_channel_videos Added function get comment threads Added vignette example get stats videos channel.","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-030-2016-08-04","dir":"Changelog","previous_headings":"","what":"version 0.3.0 2016-08-04","title":"version 0.3.0 2016-08-04","text":"CRAN release: 2016-08-04 Replaces list_channel_videos list_channel_resources. Returns list. Supports documents optional params except onBehalfOfContentOwner, list_guidecats, list_channel_activities, get_captions, list_channel_sections, get_comments, list_langs, list_regions Adds get_playlists, get_playlist_items, get_subscriptions, get_videos Renames get_channel get_channel_stats Standardize argument naming snake_case","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-021-2016-06-20","dir":"Changelog","previous_headings":"","what":"version 0.2.1 2016-06-20","title":"version 0.2.1 2016-06-20","text":"CRAN release: 2016-06-20 Support dots — allow passing extra arguments httr GET POST tests Added list channel activities list channel sections Get details uses abstract infrastructure yt_oauth takes path token file. removing file longer supported","code":""},{"path":"https://soodoku.github.io/tuber/news/index.html","id":"version-020-2016-01-16","dir":"Changelog","previous_headings":"","what":"version 0.2.0 2016-01-16","title":"version 0.2.0 2016-01-16","text":"Deprecated Freebase Topic Search Supports many functions API. instance, list_langs, list_guidecats, list_videocats, list_regions Supports arguments many functions. instance, comments now supports maxResults, textFormat etc. Return defaulted data.frame many functions","code":""}]
